bufio.ScanBytes(data []byte, atEOF bool):(advance int, token []byte, err error)
bufio.ScanLines(data []byte, atEOF bool):(advance int, token []byte, err error)
bufio.ScanRunes(data []byte, atEOF bool):(advance int, token []byte, err error)
bufio.ScanWords(data []byte, atEOF bool):(advance int, token []byte, err error)
bufio.NewReadWriter(r *Reader, w *Writer):*ReadWriter
bufio.NewReader(rd io.Reader):*Reader
bufio.NewReaderSize(rd io.Reader, size int):*Reader
bufio.NewScanner(r io.Reader):*Scanner
bufio.NewWriter(w io.Writer):*Writer
bufio.NewWriterSize(w io.Writer, size int):*Writer
bytes.Compare(a, b []byte):int
bytes.Contains(b, subslice []byte):bool
bytes.Count(s, sep []byte):int
bytes.Equal(a, b []byte):bool
bytes.EqualFold(s, t []byte):bool
bytes.Fields(s []byte):[][]byte
bytes.FieldsFunc(s []byte, f func(rune) bool):[][]byte
bytes.HasPrefix(s, prefix []byte):bool
bytes.HasSuffix(s, suffix []byte):bool
bytes.Index(s, sep []byte):int
bytes.IndexAny(s []byte, chars string):int
bytes.IndexByte(s []byte, c byte):int
bytes.IndexFunc(s []byte, f func(r rune) bool):int
bytes.IndexRune(s []byte, r rune):int
bytes.Join(s [][]byte, sep []byte):[]byte
bytes.LastIndex(s, sep []byte):int
bytes.LastIndexAny(s []byte, chars string):int
bytes.LastIndexByte(s []byte, c byte):int
bytes.LastIndexFunc(s []byte, f func(r rune) bool):int
bytes.Map(mapping func(r rune) rune, s []byte):[]byte
bytes.Repeat(b []byte, count int):[]byte
bytes.Replace(s, old, new []byte, n int):[]byte
bytes.Runes(s []byte):[]rune
bytes.Split(s, sep []byte):[][]byte
bytes.SplitAfter(s, sep []byte):[][]byte
bytes.SplitAfterN(s, sep []byte, n int):[][]byte
bytes.SplitN(s, sep []byte, n int):[][]byte
bytes.Title(s []byte):[]byte
bytes.ToLower(s []byte):[]byte
bytes.ToLowerSpecial(_case unicode.SpecialCase, s []byte):[]byte
bytes.ToTitle(s []byte):[]byte
bytes.ToTitleSpecial(_case unicode.SpecialCase, s []byte):[]byte
bytes.ToUpper(s []byte):[]byte
bytes.ToUpperSpecial(_case unicode.SpecialCase, s []byte):[]byte
bytes.Trim(s []byte, cutset string):[]byte
bytes.TrimFunc(s []byte, f func(r rune) bool):[]byte
bytes.TrimLeft(s []byte, cutset string):[]byte
bytes.TrimLeftFunc(s []byte, f func(r rune) bool):[]byte
bytes.TrimPrefix(s, prefix []byte):[]byte
bytes.TrimRight(s []byte, cutset string):[]byte
bytes.TrimRightFunc(s []byte, f func(r rune) bool):[]byte
bytes.TrimSpace(s []byte):[]byte
bytes.TrimSuffix(s, suffix []byte):[]byte
bytes.NewBuffer(buf []byte):*Buffer
bytes.NewBufferString(s string):*Buffer
bytes.NewReader(b []byte):*Reader
math.Abs(x float64):float64
math.Acos(x float64):float64
math.Acosh(x float64):float64
math.Asin(x float64):float64
math.Asinh(x float64):float64
math.Atan(x float64):float64
math.Atan2(y, x float64):float64
math.Atanh(x float64):float64
math.Cbrt(x float64):float64
math.Ceil(x float64):float64
math.Copysign(x, y float64):float64
math.Cos(x float64):float64
math.Cosh(x float64):float64
math.Dim(x, y float64):float64
math.Erf(x float64):float64
math.Erfc(x float64):float64
math.Exp(x float64):float64
math.Exp2(x float64):float64
math.Expm1(x float64):float64
math.Float32bits(f float32):uint32
math.Float32frombits(b uint32):float32
math.Float64bits(f float64):uint64
math.Float64frombits(b uint64):float64
math.Floor(x float64):float64
math.Frexp(f float64):(frac float64, exp int)
math.Gamma(x float64):float64
math.Hypot(p, q float64):float64
math.Ilogb(x float64):int
math.Inf(sign int):float64
math.IsInf(f float64, sign int):bool
math.IsNaN(f float64):(is bool)
math.J0(x float64):float64
math.J1(x float64):float64
math.Jn(n int, x float64):float64
math.Ldexp(frac float64, exp int):float64
math.Lgamma(x float64):(lgamma float64, sign int)
math.Log(x float64):float64
math.Log10(x float64):float64
math.Log1p(x float64):float64
math.Log2(x float64):float64
math.Logb(x float64):float64
math.Max(x, y float64):float64
math.Min(x, y float64):float64
math.Mod(x, y float64):float64
math.Modf(f float64):(int float64, frac float64)
math.NaN():float64
math.Nextafter(x, y float64):(r float64)
math.Nextafter32(x, y float32):(r float32)
math.Pow(x, y float64):float64
math.Pow10(e int):float64
math.Remainder(x, y float64):float64
math.Signbit(x float64):bool
math.Sin(x float64):float64
math.Sincos(x float64):(sin, cos float64)
math.Sinh(x float64):float64
math.Sqrt(x float64):float64
math.Tan(x float64):float64
math.Tanh(x float64):float64
math.Trunc(x float64):float64
math.Y0(x float64):float64
math.Y1(x float64):float64
math.Yn(n int, x float64):float64
strings.Compare(a, b string):int
strings.Contains(s, substr string):bool
strings.ContainsAny(s, chars string):bool
strings.ContainsRune(s string, r rune):bool
strings.Count(s, sep string):int
strings.EqualFold(s, t string):bool
strings.Fields(s string):[]string
strings.FieldsFunc(s string, f func(rune) bool):[]string
strings.HasPrefix(s, prefix string):bool
strings.HasSuffix(s, suffix string):bool
strings.Index(s, sep string):int
strings.IndexAny(s, chars string):int
strings.IndexByte(s string, c byte):int
strings.IndexFunc(s string, f func(rune) bool):int
strings.IndexRune(s string, r rune):int
strings.Join(a []string, sep string):string
strings.LastIndex(s, sep string):int
strings.LastIndexAny(s, chars string):int
strings.LastIndexByte(s string, c byte):int
strings.LastIndexFunc(s string, f func(rune) bool):int
strings.Map(mapping func(rune) rune, s string):string
strings.Repeat(s string, count int):string
strings.Replace(s, old, new string, n int):string
strings.Split(s, sep string):[]string
strings.SplitAfter(s, sep string):[]string
strings.SplitAfterN(s, sep string, n int):[]string
strings.SplitN(s, sep string, n int):[]string
strings.Title(s string):string
strings.ToLower(s string):string
strings.ToLowerSpecial(_case unicode.SpecialCase, s string):string
strings.ToTitle(s string):string
strings.ToTitleSpecial(_case unicode.SpecialCase, s string):string
strings.ToUpper(s string):string
strings.ToUpperSpecial(_case unicode.SpecialCase, s string):string
strings.Trim(s string, cutset string):string
strings.TrimFunc(s string, f func(rune) bool):string
strings.TrimLeft(s string, cutset string):string
strings.TrimLeftFunc(s string, f func(rune) bool):string
strings.TrimPrefix(s, prefix string):string
strings.TrimRight(s string, cutset string):string
strings.TrimRightFunc(s string, f func(rune) bool):string
strings.TrimSpace(s string):string
strings.TrimSuffix(s, suffix string):string
strings.NewReader(s string):*Reader
strings.NewReplacer(oldnew ...string):*Replacer
crypto.RegisterHash(h Hash, f func():hash.Hash)
errors.New(text string):error
expvar.Do(f func(KeyValue))
expvar.Publish(name string, v Var)
expvar.NewFloat(name string):*Float
expvar.NewInt(name string):*Int
expvar.NewMap(name string):*Map
expvar.NewString(name string):*String
expvar.Get(name string):Var
flag.Arg(i int):string
flag.Args():[]string
flag.Bool(name string, value bool, usage string):*bool
flag.BoolVar(p *bool, name string, value bool, usage string)
flag.Duration(name string, value time.Duration, usage string):*time.Duration
flag.DurationVar(p *time.Duration, name string, value time.Duration, usage string)
flag.Float64(name string, value float64, usage string):*float64
flag.Float64Var(p *float64, name string, value float64, usage string)
flag.Int(name string, value int, usage string):*int
flag.Int64(name string, value int64, usage string):*int64
flag.Int64Var(p *int64, name string, value int64, usage string)
flag.IntVar(p *int, name string, value int, usage string)
flag.NArg():int
flag.NFlag():int
flag.Parse()
flag.Parsed():bool
flag.PrintDefaults()
flag.Set(name, value string):error
flag.String(name string, value string, usage string):*string
flag.StringVar(p *string, name string, value string, usage string)
flag.Uint(name string, value uint, usage string):*uint
flag.Uint64(name string, value uint64, usage string):*uint64
flag.Uint64Var(p *uint64, name string, value uint64, usage string)
flag.UintVar(p *uint, name string, value uint, usage string)
flag.UnquoteUsage(flag *Flag):(name string, usage string)
flag.Var(value Value, name string, usage string)
flag.Visit(fn func(*Flag))
flag.VisitAll(fn func(*Flag))
flag.Lookup(name string):*Flag
flag.NewFlagSet(name string, errorHandling ErrorHandling):*FlagSet
fmt.Errorf(format string, a ...interface{}):error
fmt.Fprint(w io.Writer, a ...interface{}):(n int, err error)
fmt.Fprintf(w io.Writer, format string, a ...interface{}):(n int, err error)
fmt.Fprintln(w io.Writer, a ...interface{}):(n int, err error)
fmt.Fscan(r io.Reader, a ...interface{}):(n int, err error)
fmt.Fscanf(r io.Reader, format string, a ...interface{}):(n int, err error)
fmt.Fscanln(r io.Reader, a ...interface{}):(n int, err error)
fmt.Print(a ...interface{}):(n int, err error)
fmt.Printf(format string, a ...interface{}):(n int, err error)
fmt.Println(a ...interface{}):(n int, err error)
fmt.Scan(a ...interface{}):(n int, err error)
fmt.Scanf(format string, a ...interface{}):(n int, err error)
fmt.Scanln(a ...interface{}):(n int, err error)
fmt.Sprint(a ...interface{}):string
fmt.Sprintf(format string, a ...interface{}):string
fmt.Sprintln(a ...interface{}):string
fmt.Sscan(str string, a ...interface{}):(n int, err error)
fmt.Sscanf(str string, format string, a ...interface{}):(n int, err error)
fmt.Sscanln(str string, a ...interface{}):(n int, err error)
html.EscapeString(s string):string
html.UnescapeString(s string):string
image.RegisterFormat(name, magic string, decode func(io.Reader):(Image, error), decodeConfig func(io.Reader):(Config, error))
image.NewAlpha(r Rectangle):*Alpha
image.NewAlpha16(r Rectangle):*Alpha16
image.NewCMYK(r Rectangle):*CMYK
image.DecodeConfig(r io.Reader):(Config, string, error)
image.NewGray(r Rectangle):*Gray
image.NewGray16(r Rectangle):*Gray16
image.Decode(r io.Reader):(Image, string, error)
image.NewNRGBA(r Rectangle):*NRGBA
image.NewNRGBA64(r Rectangle):*NRGBA64
image.NewPaletted(r Rectangle, p color.Palette):*Paletted
image.Pt(X, Y int):Point
image.NewRGBA(r Rectangle):*RGBA
image.NewRGBA64(r Rectangle):*RGBA64
image.Rect(x0, y0, x1, y1 int):Rectangle
image.NewUniform(c color.Color):*Uniform
image.NewYCbCr(r Rectangle, subsampleRatio YCbCrSubsampleRatio):*YCbCr
syscall.AcceptEx(ls Handle, as Handle, buf *byte, rxdatalen uint32, laddrlen uint32, raddrlen uint32, recvd *uint32, overlapped *Overlapped):(err error)
syscall.Bind(fd Handle, sa Sockaddr):(err error)
syscall.BytePtrFromString(s string):(*byte, error)
syscall.ByteSliceFromString(s string):([]byte, error)
syscall.CancelIo(s Handle):(err error)
syscall.CancelIoEx(s Handle, o *Overlapped):(err error)
syscall.CertAddCertificateContextToStore(store Handle, certContext *CertContext, addDisposition uint32, storeContext **CertContext):(err error)
syscall.CertCloseStore(store Handle, flags uint32):(err error)
syscall.CertFreeCertificateChain(ctx *CertChainContext)
syscall.CertFreeCertificateContext(ctx *CertContext):(err error)
syscall.CertGetCertificateChain(engine Handle, leaf *CertContext, time *Filetime, additionalStore Handle, para *CertChainPara, flags uint32, reserved uintptr, chainCtx **CertChainContext):(err error)
syscall.CertVerifyCertificateChainPolicy(policyOID uintptr, chain *CertChainContext, para *CertChainPolicyPara, status *CertChainPolicyStatus):(err error)
syscall.Chdir(path string):(err error)
syscall.Chmod(path string, mode uint32):(err error)
syscall.Chown(path string, uid int, gid int):(err error)
syscall.Clearenv()
syscall.Close(fd Handle):(err error)
syscall.CloseHandle(handle Handle):(err error)
syscall.CloseOnExec(fd Handle)
syscall.Closesocket(s Handle):(err error)
syscall.CommandLineToArgv(cmd *uint16, argc *int32):(argv *[8192]*[8192]uint16, err error)
syscall.ComputerName():(name string, err error)
syscall.Connect(fd Handle, sa Sockaddr):(err error)
syscall.ConnectEx(fd Handle, sa Sockaddr, sendBuf *byte, sendDataLen uint32, bytesSent *uint32, overlapped *Overlapped):error
syscall.ConvertSidToStringSid(sid *SID, stringSid **uint16):(err error)
syscall.ConvertStringSidToSid(stringSid *uint16, sid **SID):(err error)
syscall.CopySid(destSidLen uint32, destSid *SID, srcSid *SID):(err error)
syscall.CreateDirectory(path *uint16, sa *SecurityAttributes):(err error)
syscall.CreateHardLink(filename *uint16, existingfilename *uint16, reserved uintptr):(err error)
syscall.CreatePipe(readhandle *Handle, writehandle *Handle, sa *SecurityAttributes, size uint32):(err error)
syscall.CreateProcess(appName *uint16, commandLine *uint16, procSecurity *SecurityAttributes, threadSecurity *SecurityAttributes, inheritHandles bool, creationFlags uint32, env *uint16, currentDir *uint16, startupInfo *StartupInfo, outProcInfo *ProcessInformation):(err error)
syscall.CreateSymbolicLink(symlinkfilename *uint16, targetfilename *uint16, flags uint32):(err error)
syscall.CryptAcquireContext(provhandle *Handle, container *uint16, provider *uint16, provtype uint32, flags uint32):(err error)
syscall.CryptGenRandom(provhandle Handle, buflen uint32, buf *byte):(err error)
syscall.CryptReleaseContext(provhandle Handle, flags uint32):(err error)
syscall.DeleteFile(path *uint16):(err error)
syscall.DeviceIoControl(handle Handle, ioControlCode uint32, inBuffer *byte, inBufferSize uint32, outBuffer *byte, outBufferSize uint32, bytesReturned *uint32, overlapped *Overlapped):(err error)
syscall.DnsNameCompare(name1 *uint16, name2 *uint16):(same bool)
syscall.DnsQuery(name string, qtype uint16, options uint32, extra *byte, qrs **DNSRecord, pr *byte):(status error)
syscall.DnsRecordListFree(rl *DNSRecord, freetype uint32)
syscall.DuplicateHandle(hSourceProcessHandle Handle, hSourceHandle Handle, hTargetProcessHandle Handle, lpTargetHandle *Handle, dwDesiredAccess uint32, bInheritHandle bool, dwOptions uint32):(err error)
syscall.Environ():[]string
syscall.EscapeArg(s string):string
syscall.Exec(argv0 string, argv []string, envv []string):(err error)
syscall.Exit(code int)
syscall.ExitProcess(exitcode uint32)
syscall.Fchdir(fd Handle):(err error)
syscall.Fchmod(fd Handle, mode uint32):(err error)
syscall.Fchown(fd Handle, uid int, gid int):(err error)
syscall.FindClose(handle Handle):(err error)
syscall.FindNextFile(handle Handle, data *Win32finddata):(err error)
syscall.FlushFileBuffers(handle Handle):(err error)
syscall.FlushViewOfFile(addr uintptr, length uintptr):(err error)
syscall.FormatMessage(flags uint32, msgsrc uint32, msgid uint32, langid uint32, buf []uint16, args *byte):(n uint32, err error)
syscall.FreeAddrInfoW(addrinfo *AddrinfoW)
syscall.FreeEnvironmentStrings(envs *uint16):(err error)
syscall.FreeLibrary(handle Handle):(err error)
syscall.Fsync(fd Handle):(err error)
syscall.Ftruncate(fd Handle, length int64):(err error)
syscall.FullPath(name string):(path string, err error)
syscall.GetAcceptExSockaddrs(buf *byte, rxdatalen uint32, laddrlen uint32, raddrlen uint32, lrsa **RawSockaddrAny, lrsalen *int32, rrsa **RawSockaddrAny, rrsalen *int32)
syscall.GetAdaptersInfo(ai *IpAdapterInfo, ol *uint32):(errcode error)
syscall.GetAddrInfoW(nodename *uint16, servicename *uint16, hints *AddrinfoW, result **AddrinfoW):(sockerr error)
syscall.GetCommandLine():(cmd *uint16)
syscall.GetComputerName(buf *uint16, n *uint32):(err error)
syscall.GetConsoleMode(console Handle, mode *uint32):(err error)
syscall.GetCurrentDirectory(buflen uint32, buf *uint16):(n uint32, err error)
syscall.GetEnvironmentStrings():(envs *uint16, err error)
syscall.GetEnvironmentVariable(name *uint16, buffer *uint16, size uint32):(n uint32, err error)
syscall.GetExitCodeProcess(handle Handle, exitcode *uint32):(err error)
syscall.GetFileAttributes(name *uint16):(attrs uint32, err error)
syscall.GetFileAttributesEx(name *uint16, level uint32, info *byte):(err error)
syscall.GetFileInformationByHandle(handle Handle, data *ByHandleFileInformation):(err error)
syscall.GetFileType(filehandle Handle):(n uint32, err error)
syscall.GetFullPathName(path *uint16, buflen uint32, buf *uint16, fname **uint16):(n uint32, err error)
syscall.GetIfEntry(pIfRow *MibIfRow):(errcode error)
syscall.GetLastError():(lasterr error)
syscall.GetLengthSid(sid *SID):(len uint32)
syscall.GetLongPathName(path *uint16, buf *uint16, buflen uint32):(n uint32, err error)
syscall.GetProcAddress(module Handle, procname string):(proc uintptr, err error)
syscall.GetProcessTimes(handle Handle, creationTime *Filetime, exitTime *Filetime, kernelTime *Filetime, userTime *Filetime):(err error)
syscall.GetQueuedCompletionStatus(cphandle Handle, qty *uint32, key *uint32, overlapped **Overlapped, timeout uint32):(err error)
syscall.GetShortPathName(longpath *uint16, shortpath *uint16, buflen uint32):(n uint32, err error)
syscall.GetStartupInfo(startupInfo *StartupInfo):(err error)
syscall.GetSystemTimeAsFileTime(time *Filetime)
syscall.GetTempPath(buflen uint32, buf *uint16):(n uint32, err error)
syscall.GetTimeZoneInformation(tzi *Timezoneinformation):(rc uint32, err error)
syscall.GetTokenInformation(t Token, infoClass uint32, info *byte, infoLen uint32, returnedLen *uint32):(err error)
syscall.GetUserNameEx(nameFormat uint32, nameBuffre *uint16, nSize *uint32):(err error)
syscall.GetUserProfileDirectory(t Token, dir *uint16, dirLen *uint32):(err error)
syscall.GetVersion():(ver uint32, err error)
syscall.Getegid():(egid int)
syscall.Getenv(key string):(value string, found bool)
syscall.Geteuid():(euid int)
syscall.Getgid():(gid int)
syscall.Getgroups():(gids []int, err error)
syscall.Getpagesize():int
syscall.Getpid():(pid int)
syscall.Getppid():(ppid int)
syscall.Getsockopt(s Handle, level int32, optname int32, optval *byte, optlen *int32):(err error)
syscall.GetsockoptInt(fd Handle, level, opt int):(int, error)
syscall.Gettimeofday(tv *Timeval):(err error)
syscall.Getuid():(uid int)
syscall.Getwd():(wd string, err error)
syscall.Lchown(path string, uid int, gid int):(err error)
syscall.Link(oldpath, newpath string):(err error)
syscall.Listen(s Handle, n int):(err error)
syscall.LoadCancelIoEx():error
syscall.LoadConnectEx():error
syscall.LoadCreateSymbolicLink():error
syscall.LoadGetAddrInfo():error
syscall.LoadSetFileCompletionNotificationModes():error
syscall.LookupAccountName(systemName *uint16, accountName *uint16, sid *SID, sidLen *uint32, refdDomainName *uint16, refdDomainNameLen *uint32, use *uint32):(err error)
syscall.LookupAccountSid(systemName *uint16, sid *SID, name *uint16, nameLen *uint32, refdDomainName *uint16, refdDomainNameLen *uint32, use *uint32):(err error)
syscall.MapViewOfFile(handle Handle, access uint32, offsetHigh uint32, offsetLow uint32, length uintptr):(addr uintptr, err error)
syscall.Mkdir(path string, mode uint32):(err error)
syscall.MoveFile(from *uint16, to *uint16):(err error)
syscall.NetApiBufferFree(buf *byte):(neterr error)
syscall.NetGetJoinInformation(server *uint16, name **uint16, bufType *uint32):(neterr error)
syscall.NetUserGetInfo(serverName *uint16, userName *uint16, level uint32, buf **byte):(neterr error)
syscall.NewCallback(fn interface{}):uintptr
syscall.NewCallbackCDecl(fn interface{}):uintptr
syscall.Ntohs(netshort uint16):(u uint16)
syscall.OpenProcessToken(h Handle, access uint32, token *Token):(err error)
syscall.Pipe(p []Handle):(err error)
syscall.PostQueuedCompletionStatus(cphandle Handle, qty uint32, key uint32, overlapped *Overlapped):(err error)
syscall.Process32First(snapshot Handle, procEntry *ProcessEntry32):(err error)
syscall.Process32Next(snapshot Handle, procEntry *ProcessEntry32):(err error)
syscall.Read(fd Handle, p []byte):(n int, err error)
syscall.ReadConsole(console Handle, buf *uint16, toread uint32, read *uint32, inputControl *byte):(err error)
syscall.ReadDirectoryChanges(handle Handle, buf *byte, buflen uint32, watchSubTree bool, mask uint32, retlen *uint32, overlapped *Overlapped, completionRoutine uintptr):(err error)
syscall.ReadFile(handle Handle, buf []byte, done *uint32, overlapped *Overlapped):(err error)
syscall.Readlink(path string, buf []byte):(n int, err error)
syscall.Recvfrom(fd Handle, p []byte, flags int):(n int, from Sockaddr, err error)
syscall.RegCloseKey(key Handle):(regerrno error)
syscall.RegEnumKeyEx(key Handle, index uint32, name *uint16, nameLen *uint32, reserved *uint32, class *uint16, classLen *uint32, lastWriteTime *Filetime):(regerrno error)
syscall.RegOpenKeyEx(key Handle, subkey *uint16, options uint32, desiredAccess uint32, result *Handle):(regerrno error)
syscall.RegQueryInfoKey(key Handle, class *uint16, classLen *uint32, reserved *uint32, subkeysLen *uint32, maxSubkeyLen *uint32, maxClassLen *uint32, valuesLen *uint32, maxValueNameLen *uint32, maxValueLen *uint32, saLen *uint32, lastWriteTime *Filetime):(regerrno error)
syscall.RegQueryValueEx(key Handle, name *uint16, reserved *uint32, valtype *uint32, buf *byte, buflen *uint32):(regerrno error)
syscall.RemoveDirectory(path *uint16):(err error)
syscall.Rename(oldpath, newpath string):(err error)
syscall.Rmdir(path string):(err error)
syscall.Seek(fd Handle, offset int64, whence int):(newoffset int64, err error)
syscall.Sendto(fd Handle, p []byte, flags int, to Sockaddr):(err error)
syscall.SetCurrentDirectory(path *uint16):(err error)
syscall.SetEndOfFile(handle Handle):(err error)
syscall.SetEnvironmentVariable(name *uint16, value *uint16):(err error)
syscall.SetFileAttributes(name *uint16, attrs uint32):(err error)
syscall.SetFileCompletionNotificationModes(handle Handle, flags uint8):(err error)
syscall.SetFilePointer(handle Handle, lowoffset int32, highoffsetptr *int32, whence uint32):(newlowoffset uint32, err error)
syscall.SetFileTime(handle Handle, ctime *Filetime, atime *Filetime, wtime *Filetime):(err error)
syscall.SetHandleInformation(handle Handle, mask uint32, flags uint32):(err error)
syscall.SetNonblock(fd Handle, nonblocking bool):(err error)
syscall.Setenv(key, value string):error
syscall.Setsockopt(s Handle, level int32, optname int32, optval *byte, optlen int32):(err error)
syscall.SetsockoptIPMreq(fd Handle, level, opt int, mreq *IPMreq):(err error)
syscall.SetsockoptIPv6Mreq(fd Handle, level, opt int, mreq *IPv6Mreq):(err error)
syscall.SetsockoptInet4Addr(fd Handle, level, opt int, value [4]byte):(err error)
syscall.SetsockoptInt(fd Handle, level, opt int, value int):(err error)
syscall.SetsockoptLinger(fd Handle, level, opt int, l *Linger):(err error)
syscall.SetsockoptTimeval(fd Handle, level, opt int, tv *Timeval):(err error)
syscall.Shutdown(fd Handle, how int):(err error)
syscall.StartProcess(argv0 string, argv []string, attr *ProcAttr):(pid int, handle uintptr, err error)
syscall.StringBytePtr(s string):*byte
syscall.StringByteSlice(s string):[]byte
syscall.StringToUTF16(s string):[]uint16
syscall.StringToUTF16Ptr(s string):*uint16
syscall.Symlink(path, link string):(err error)
syscall.Syscall(trap, nargs, a1, a2, a3 uintptr):(r1, r2 uintptr, err Errno)
syscall.Syscall12(trap, nargs, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12 uintptr):(r1, r2 uintptr, err Errno)
syscall.Syscall15(trap, nargs, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15 uintptr):(r1, r2 uintptr, err Errno)
syscall.Syscall6(trap, nargs, a1, a2, a3, a4, a5, a6 uintptr):(r1, r2 uintptr, err Errno)
syscall.Syscall9(trap, nargs, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr):(r1, r2 uintptr, err Errno)
syscall.TerminateProcess(handle Handle, exitcode uint32):(err error)
syscall.TimespecToNsec(ts Timespec):int64
syscall.TranslateAccountName(username string, from, to uint32, initSize int):(string, error)
syscall.TranslateName(accName *uint16, accNameFormat uint32, desiredNameFormat uint32, translatedName *uint16, nSize *uint32):(err error)
syscall.TransmitFile(s Handle, handle Handle, bytesToWrite uint32, bytsPerSend uint32, overlapped *Overlapped, transmitFileBuf *TransmitFileBuffers, flags uint32):(err error)
syscall.UTF16FromString(s string):([]uint16, error)
syscall.UTF16PtrFromString(s string):(*uint16, error)
syscall.UTF16ToString(s []uint16):string
syscall.Unlink(path string):(err error)
syscall.UnmapViewOfFile(addr uintptr):(err error)
syscall.Unsetenv(key string):error
syscall.Utimes(path string, tv []Timeval):(err error)
syscall.UtimesNano(path string, ts []Timespec):(err error)
syscall.VirtualLock(addr uintptr, length uintptr):(err error)
syscall.VirtualUnlock(addr uintptr, length uintptr):(err error)
syscall.WSACleanup():(err error)
syscall.WSAEnumProtocols(protocols *int32, protocolBuffer *WSAProtocolInfo, bufferLength *uint32):(n int32, err error)
syscall.WSAIoctl(s Handle, iocc uint32, inbuf *byte, cbif uint32, outbuf *byte, cbob uint32, cbbr *uint32, overlapped *Overlapped, completionRoutine uintptr):(err error)
syscall.WSARecv(s Handle, bufs *WSABuf, bufcnt uint32, recvd *uint32, flags *uint32, overlapped *Overlapped, croutine *byte):(err error)
syscall.WSARecvFrom(s Handle, bufs *WSABuf, bufcnt uint32, recvd *uint32, flags *uint32, from *RawSockaddrAny, fromlen *int32, overlapped *Overlapped, croutine *byte):(err error)
syscall.WSASend(s Handle, bufs *WSABuf, bufcnt uint32, sent *uint32, flags uint32, overlapped *Overlapped, croutine *byte):(err error)
syscall.WSASendTo(s Handle, bufs *WSABuf, bufcnt uint32, sent *uint32, flags uint32, to *RawSockaddrAny, tolen int32, overlapped *Overlapped, croutine *byte):(err error)
syscall.WSASendto(s Handle, bufs *WSABuf, bufcnt uint32, sent *uint32, flags uint32, to Sockaddr, overlapped *Overlapped, croutine *byte):(err error)
syscall.WSAStartup(verreq uint32, data *WSAData):(sockerr error)
syscall.WaitForSingleObject(handle Handle, waitMilliseconds uint32):(event uint32, err error)
syscall.Write(fd Handle, p []byte):(n int, err error)
syscall.WriteConsole(console Handle, buf *uint16, towrite uint32, written *uint32, reserved *byte):(err error)
syscall.WriteFile(handle Handle, buf []byte, done *uint32, overlapped *Overlapped):(err error)
syscall.CertCreateCertificateContext(certEncodingType uint32, certEncoded *byte, encodedLen uint32):(context *CertContext, err error)
syscall.CertEnumCertificatesInStore(store Handle, prevContext *CertContext):(context *CertContext, err error)
syscall.LoadDLL(name string):(dll *DLL, err error)
syscall.MustLoadDLL(name string):*DLL
syscall.NsecToFiletime(nsec int64):(ft Filetime)
syscall.Accept(fd Handle):(nfd Handle, sa Sockaddr, err error)
syscall.CertOpenStore(storeProvider uintptr, msgAndCertEncodingType uint32, cryptProv uintptr, flags uint32, para uintptr):(handle Handle, err error)
syscall.CertOpenSystemStore(hprov Handle, name *uint16):(store Handle, err error)
syscall.CreateFile(name *uint16, access uint32, mode uint32, sa *SecurityAttributes, createmode uint32, attrs uint32, templatefile int32):(handle Handle, err error)
syscall.CreateFileMapping(fhandle Handle, sa *SecurityAttributes, prot uint32, maxSizeHigh uint32, maxSizeLow uint32, name *uint16):(handle Handle, err error)
syscall.CreateIoCompletionPort(filehandle Handle, cphandle Handle, key uint32, threadcnt uint32):(handle Handle, err error)
syscall.CreateToolhelp32Snapshot(flags uint32, processId uint32):(handle Handle, err error)
syscall.FindFirstFile(name *uint16, data *Win32finddata):(handle Handle, err error)
syscall.GetCurrentProcess():(pseudoHandle Handle, err error)
syscall.GetStdHandle(stdhandle int):(handle Handle, err error)
syscall.LoadLibrary(libname string):(handle Handle, err error)
syscall.LocalFree(hmem Handle):(handle Handle, err error)
syscall.Open(path string, mode int, perm uint32):(fd Handle, err error)
syscall.OpenProcess(da uint32, inheritHandle bool, pid uint32):(handle Handle, err error)
syscall.Socket(domain, typ, proto int):(fd Handle, err error)
syscall.GetHostByName(name string):(h *Hostent, err error)
syscall.NewLazyDLL(name string):*LazyDLL
syscall.GetProtoByName(name string):(p *Protoent, err error)
syscall.LookupSID(system, account string):(sid *SID, domain string, accType uint32, err error)
syscall.StringToSid(s string):(*SID, error)
syscall.GetServByName(name string, proto string):(s *Servent, err error)
syscall.Getpeername(fd Handle):(sa Sockaddr, err error)
syscall.Getsockname(fd Handle):(sa Sockaddr, err error)
syscall.NsecToTimespec(nsec int64):(ts Timespec)
syscall.NsecToTimeval(nsec int64):(tv Timeval)
syscall.OpenCurrentProcessToken():(Token, error)
io.Copy(dst Writer, src Reader):(written int64, err error)
io.CopyBuffer(dst Writer, src Reader, buf []byte):(written int64, err error)
io.CopyN(dst Writer, src Reader, n int64):(written int64, err error)
io.ReadAtLeast(r Reader, buf []byte, min int):(n int, err error)
io.ReadFull(r Reader, buf []byte):(n int, err error)
io.WriteString(w Writer, s string):(n int, err error)
io.Pipe():(*PipeReader, *PipeWriter)
io.LimitReader(r Reader, n int64):Reader
io.MultiReader(readers ...Reader):Reader
io.TeeReader(r Reader, w Writer):Reader
io.NewSectionReader(r ReaderAt, off int64, n int64):*SectionReader
io.MultiWriter(writers ...Writer):Writer
log.Fatal(v ...interface{})
log.Fatalf(format string, v ...interface{})
log.Fatalln(v ...interface{})
log.Flags():int
log.Output(calldepth int, s string):error
log.Panic(v ...interface{})
log.Panicf(format string, v ...interface{})
log.Panicln(v ...interface{})
log.Prefix():string
log.Print(v ...interface{})
log.Printf(format string, v ...interface{})
log.Println(v ...interface{})
log.SetFlags(flag int)
log.SetOutput(w io.Writer)
log.SetPrefix(prefix string)
log.New(out io.Writer, prefix string, flag int):*Logger
math.Abs(x float64):float64
math.Acos(x float64):float64
math.Acosh(x float64):float64
math.Asin(x float64):float64
math.Asinh(x float64):float64
math.Atan(x float64):float64
math.Atan2(y, x float64):float64
math.Atanh(x float64):float64
math.Cbrt(x float64):float64
math.Ceil(x float64):float64
math.Copysign(x, y float64):float64
math.Cos(x float64):float64
math.Cosh(x float64):float64
math.Dim(x, y float64):float64
math.Erf(x float64):float64
math.Erfc(x float64):float64
math.Exp(x float64):float64
math.Exp2(x float64):float64
math.Expm1(x float64):float64
math.Float32bits(f float32):uint32
math.Float32frombits(b uint32):float32
math.Float64bits(f float64):uint64
math.Float64frombits(b uint64):float64
math.Floor(x float64):float64
math.Frexp(f float64):(frac float64, exp int)
math.Gamma(x float64):float64
math.Hypot(p, q float64):float64
math.Ilogb(x float64):int
math.Inf(sign int):float64
math.IsInf(f float64, sign int):bool
math.IsNaN(f float64):(is bool)
math.J0(x float64):float64
math.J1(x float64):float64
math.Jn(n int, x float64):float64
math.Ldexp(frac float64, exp int):float64
math.Lgamma(x float64):(lgamma float64, sign int)
math.Log(x float64):float64
math.Log10(x float64):float64
math.Log1p(x float64):float64
math.Log2(x float64):float64
math.Logb(x float64):float64
math.Max(x, y float64):float64
math.Min(x, y float64):float64
math.Mod(x, y float64):float64
math.Modf(f float64):(int float64, frac float64)
math.NaN():float64
math.Nextafter(x, y float64):(r float64)
math.Nextafter32(x, y float32):(r float32)
math.Pow(x, y float64):float64
math.Pow10(e int):float64
math.Remainder(x, y float64):float64
math.Signbit(x float64):bool
math.Sin(x float64):float64
math.Sincos(x float64):(sin, cos float64)
math.Sinh(x float64):float64
math.Sqrt(x float64):float64
math.Tan(x float64):float64
math.Tanh(x float64):float64
math.Trunc(x float64):float64
math.Y0(x float64):float64
math.Y1(x float64):float64
math.Yn(n int, x float64):float64
mime.AddExtensionType(ext, typ string):error
mime.ExtensionsByType(typ string):([]string, error)
mime.FormatMediaType(t string, param map[string]string):string
mime.ParseMediaType(v string):(mediatype string, params map[string]string, err error)
mime.TypeByExtension(ext string):string
net.InterfaceAddrs():([]Addr, error)
net.Interfaces():([]Interface, error)
net.JoinHostPort(host, port string):string
net.LookupAddr(addr string):(names []string, err error)
net.LookupCNAME(name string):(cname string, err error)
net.LookupHost(host string):(addrs []string, err error)
net.LookupIP(host string):(ips []IP, err error)
net.LookupMX(name string):(mxs []*MX, err error)
net.LookupNS(name string):(nss []*NS, err error)
net.LookupPort(network, service string):(port int, err error)
net.LookupSRV(service, proto, name string):(cname string, addrs []*SRV, err error)
net.LookupTXT(name string):(txts []string, err error)
net.SplitHostPort(hostport string):(host, port string, err error)
net.Dial(network, address string):(Conn, error)
net.DialTimeout(network, address string, timeout time.Duration):(Conn, error)
net.FileConn(f *os.File):(c Conn, err error)
net.Pipe():(Conn, Conn)
net.ParseMAC(s string):(hw HardwareAddr, err error)
net.IPv4(a, b, c, d byte):IP
net.ParseCIDR(s string):(IP, *IPNet, error)
net.ParseIP(s string):IP
net.ResolveIPAddr(net, addr string):(*IPAddr, error)
net.DialIP(netProto string, laddr, raddr *IPAddr):(*IPConn, error)
net.ListenIP(netProto string, laddr *IPAddr):(*IPConn, error)
net.CIDRMask(ones, bits int):IPMask
net.IPv4Mask(a, b, c, d byte):IPMask
net.InterfaceByIndex(index int):(*Interface, error)
net.InterfaceByName(name string):(*Interface, error)
net.FileListener(f *os.File):(ln Listener, err error)
net.Listen(net, laddr string):(Listener, error)
net.FilePacketConn(f *os.File):(c PacketConn, err error)
net.ListenPacket(net, laddr string):(PacketConn, error)
net.ResolveTCPAddr(net, addr string):(*TCPAddr, error)
net.DialTCP(net string, laddr, raddr *TCPAddr):(*TCPConn, error)
net.ListenTCP(net string, laddr *TCPAddr):(*TCPListener, error)
net.ResolveUDPAddr(net, addr string):(*UDPAddr, error)
net.DialUDP(net string, laddr, raddr *UDPAddr):(*UDPConn, error)
net.ListenMulticastUDP(network string, ifi *Interface, gaddr *UDPAddr):(*UDPConn, error)
net.ListenUDP(net string, laddr *UDPAddr):(*UDPConn, error)
net.ResolveUnixAddr(net, addr string):(*UnixAddr, error)
net.DialUnix(net string, laddr, raddr *UnixAddr):(*UnixConn, error)
net.ListenUnixgram(net string, laddr *UnixAddr):(*UnixConn, error)
net.ListenUnix(net string, laddr *UnixAddr):(*UnixListener, error)
os.Chdir(dir string):error
os.Chmod(name string, mode FileMode):error
os.Chown(name string, uid, gid int):error
os.Chtimes(name string, atime time.Time, mtime time.Time):error
os.Clearenv()
os.Environ():[]string
os.Exit(code int)
os.Expand(s string, mapping func(string) string):string
os.ExpandEnv(s string):string
os.Getegid():int
os.Getenv(key string):string
os.Geteuid():int
os.Getgid():int
os.Getgroups():([]int, error)
os.Getpagesize():int
os.Getpid():int
os.Getppid():int
os.Getuid():int
os.Getwd():(dir string, err error)
os.Hostname():(name string, err error)
os.IsExist(err error):bool
os.IsNotExist(err error):bool
os.IsPathSeparator(c uint8):bool
os.IsPermission(err error):bool
os.Lchown(name string, uid, gid int):error
os.Link(oldname, newname string):error
os.LookupEnv(key string):(string, bool)
os.Mkdir(name string, perm FileMode):error
os.MkdirAll(path string, perm FileMode):error
os.NewSyscallError(syscall string, err error):error
os.Readlink(name string):(string, error)
os.Remove(name string):error
os.RemoveAll(path string):error
os.Rename(oldpath, newpath string):error
os.SameFile(fi1, fi2 FileInfo):bool
os.Setenv(key, value string):error
os.Symlink(oldname, newname string):error
os.TempDir():string
os.Truncate(name string, size int64):error
os.Unsetenv(key string):error
os.Create(name string):(*File, error)
os.NewFile(fd uintptr, name string):*File
os.Open(name string):(*File, error)
os.OpenFile(name string, flag int, perm FileMode):(*File, error)
os.Pipe():(r *File, w *File, err error)
os.Lstat(name string):(FileInfo, error)
os.Stat(name string):(FileInfo, error)
os.FindProcess(pid int):(p *Process, err error)
os.StartProcess(name string, argv []string, attr *ProcAttr):(*Process, error)
path.Base(path string):string
path.Clean(path string):string
path.Dir(path string):string
path.Ext(path string):string
path.IsAbs(path string):bool
path.Join(elem ...string):string
path.Match(pattern, name string):(matched bool, err error)
path.Split(path string):(dir, file string)
reflect.Copy(dst, src Value):int
reflect.DeepEqual(a1, a2 interface{}):bool
reflect.Select(cases []SelectCase):(chosen int, recv Value, recvOK bool)
reflect.ArrayOf(count int, elem Type):Type
reflect.ChanOf(dir ChanDir, t Type):Type
reflect.FuncOf(in, out []Type, variadic bool):Type
reflect.MapOf(key, elem Type):Type
reflect.PtrTo(t Type):Type
reflect.SliceOf(t Type):Type
reflect.TypeOf(i interface{}):Type
reflect.Append(s Value, x ...Value):Value
reflect.AppendSlice(s, t Value):Value
reflect.Indirect(v Value):Value
reflect.MakeChan(typ Type, buffer int):Value
reflect.MakeFunc(typ Type, fn func(args []Value):(results []Value)):Value
reflect.MakeMap(typ Type):Value
reflect.MakeSlice(typ Type, len, cap int):Value
reflect.New(typ Type):Value
reflect.NewAt(typ Type, p unsafe.Pointer):Value
reflect.ValueOf(i interface{}):Value
reflect.Zero(typ Type):Value
regexp.Match(pattern string, b []byte):(matched bool, err error)
regexp.MatchReader(pattern string, r io.RuneReader):(matched bool, err error)
regexp.MatchString(pattern string, s string):(matched bool, err error)
regexp.QuoteMeta(s string):string
regexp.Compile(expr string):(*Regexp, error)
regexp.CompilePOSIX(expr string):(*Regexp, error)
regexp.MustCompile(str string):*Regexp
regexp.MustCompilePOSIX(str string):*Regexp
runtime.BlockProfile(p []BlockProfileRecord):(n int, ok bool)
runtime.Breakpoint()
runtime.CPUProfile():[]byte
runtime.Caller(skip int):(pc uintptr, file string, line int, ok bool)
runtime.Callers(skip int, pc []uintptr):int
runtime.GC()
runtime.GOMAXPROCS(n int):int
runtime.GOROOT():string
runtime.Goexit()
runtime.GoroutineProfile(p []StackRecord):(n int, ok bool)
runtime.Gosched()
runtime.LockOSThread()
runtime.MemProfile(p []MemProfileRecord, inuseZero bool):(n int, ok bool)
runtime.NumCPU():int
runtime.NumCgoCall():int64
runtime.NumGoroutine():int
runtime.ReadMemStats(m *MemStats)
runtime.ReadTrace():[]byte
runtime.SetBlockProfileRate(rate int)
runtime.SetCPUProfileRate(hz int)
runtime.SetFinalizer(obj interface{}, finalizer interface{})
runtime.Stack(buf []byte, all bool):int
runtime.StartTrace():error
runtime.StopTrace()
runtime.ThreadCreateProfile(p []StackRecord):(n int, ok bool)
runtime.UnlockOSThread()
runtime.Version():string
runtime.FuncForPC(pc uintptr):*Func
sort.Float64s(a []float64)
sort.Float64sAreSorted(a []float64):bool
sort.Ints(a []int)
sort.IntsAreSorted(a []int):bool
sort.IsSorted(data Interface):bool
sort.Search(n int, f func(int) bool):int
sort.SearchFloat64s(a []float64, x float64):int
sort.SearchInts(a []int, x int):int
sort.SearchStrings(a []string, x string):int
sort.Sort(data Interface)
sort.Stable(data Interface)
sort.Strings(a []string)
sort.StringsAreSorted(a []string):bool
sort.Reverse(data Interface):Interface
strconv.AppendBool(dst []byte, b bool):[]byte
strconv.AppendFloat(dst []byte, f float64, fmt byte, prec, bitSize int):[]byte
strconv.AppendInt(dst []byte, i int64, base int):[]byte
strconv.AppendQuote(dst []byte, s string):[]byte
strconv.AppendQuoteRune(dst []byte, r rune):[]byte
strconv.AppendQuoteRuneToASCII(dst []byte, r rune):[]byte
strconv.AppendQuoteToASCII(dst []byte, s string):[]byte
strconv.AppendUint(dst []byte, i uint64, base int):[]byte
strconv.Atoi(s string):(i int, err error)
strconv.CanBackquote(s string):bool
strconv.FormatBool(b bool):string
strconv.FormatFloat(f float64, fmt byte, prec, bitSize int):string
strconv.FormatInt(i int64, base int):string
strconv.FormatUint(i uint64, base int):string
strconv.IsPrint(r rune):bool
strconv.Itoa(i int):string
strconv.ParseBool(str string):(value bool, err error)
strconv.ParseFloat(s string, bitSize int):(f float64, err error)
strconv.ParseInt(s string, base int, bitSize int):(i int64, err error)
strconv.ParseUint(s string, base int, bitSize int):(n uint64, err error)
strconv.Quote(s string):string
strconv.QuoteRune(r rune):string
strconv.QuoteRuneToASCII(r rune):string
strconv.QuoteToASCII(s string):string
strconv.Unquote(s string):(t string, err error)
strconv.UnquoteChar(s string, quote byte):(value rune, multibyte bool, tail string, err error)
strings.Compare(a, b string):int
strings.Contains(s, substr string):bool
strings.ContainsAny(s, chars string):bool
strings.ContainsRune(s string, r rune):bool
strings.Count(s, sep string):int
strings.EqualFold(s, t string):bool
strings.Fields(s string):[]string
strings.FieldsFunc(s string, f func(rune) bool):[]string
strings.HasPrefix(s, prefix string):bool
strings.HasSuffix(s, suffix string):bool
strings.Index(s, sep string):int
strings.IndexAny(s, chars string):int
strings.IndexByte(s string, c byte):int
strings.IndexFunc(s string, f func(rune) bool):int
strings.IndexRune(s string, r rune):int
strings.Join(a []string, sep string):string
strings.LastIndex(s, sep string):int
strings.LastIndexAny(s, chars string):int
strings.LastIndexByte(s string, c byte):int
strings.LastIndexFunc(s string, f func(rune) bool):int
strings.Map(mapping func(rune) rune, s string):string
strings.Repeat(s string, count int):string
strings.Replace(s, old, new string, n int):string
strings.Split(s, sep string):[]string
strings.SplitAfter(s, sep string):[]string
strings.SplitAfterN(s, sep string, n int):[]string
strings.SplitN(s, sep string, n int):[]string
strings.Title(s string):string
strings.ToLower(s string):string
strings.ToLowerSpecial(_case unicode.SpecialCase, s string):string
strings.ToTitle(s string):string
strings.ToTitleSpecial(_case unicode.SpecialCase, s string):string
strings.ToUpper(s string):string
strings.ToUpperSpecial(_case unicode.SpecialCase, s string):string
strings.Trim(s string, cutset string):string
strings.TrimFunc(s string, f func(rune) bool):string
strings.TrimLeft(s string, cutset string):string
strings.TrimLeftFunc(s string, f func(rune) bool):string
strings.TrimPrefix(s, prefix string):string
strings.TrimRight(s string, cutset string):string
strings.TrimRightFunc(s string, f func(rune) bool):string
strings.TrimSpace(s string):string
strings.TrimSuffix(s, suffix string):string
strings.NewReader(s string):*Reader
strings.NewReplacer(oldnew ...string):*Replacer
sync.NewCond(l Locker):*Cond
syscall.AcceptEx(ls Handle, as Handle, buf *byte, rxdatalen uint32, laddrlen uint32, raddrlen uint32, recvd *uint32, overlapped *Overlapped):(err error)
syscall.Bind(fd Handle, sa Sockaddr):(err error)
syscall.BytePtrFromString(s string):(*byte, error)
syscall.ByteSliceFromString(s string):([]byte, error)
syscall.CancelIo(s Handle):(err error)
syscall.CancelIoEx(s Handle, o *Overlapped):(err error)
syscall.CertAddCertificateContextToStore(store Handle, certContext *CertContext, addDisposition uint32, storeContext **CertContext):(err error)
syscall.CertCloseStore(store Handle, flags uint32):(err error)
syscall.CertFreeCertificateChain(ctx *CertChainContext)
syscall.CertFreeCertificateContext(ctx *CertContext):(err error)
syscall.CertGetCertificateChain(engine Handle, leaf *CertContext, time *Filetime, additionalStore Handle, para *CertChainPara, flags uint32, reserved uintptr, chainCtx **CertChainContext):(err error)
syscall.CertVerifyCertificateChainPolicy(policyOID uintptr, chain *CertChainContext, para *CertChainPolicyPara, status *CertChainPolicyStatus):(err error)
syscall.Chdir(path string):(err error)
syscall.Chmod(path string, mode uint32):(err error)
syscall.Chown(path string, uid int, gid int):(err error)
syscall.Clearenv()
syscall.Close(fd Handle):(err error)
syscall.CloseHandle(handle Handle):(err error)
syscall.CloseOnExec(fd Handle)
syscall.Closesocket(s Handle):(err error)
syscall.CommandLineToArgv(cmd *uint16, argc *int32):(argv *[8192]*[8192]uint16, err error)
syscall.ComputerName():(name string, err error)
syscall.Connect(fd Handle, sa Sockaddr):(err error)
syscall.ConnectEx(fd Handle, sa Sockaddr, sendBuf *byte, sendDataLen uint32, bytesSent *uint32, overlapped *Overlapped):error
syscall.ConvertSidToStringSid(sid *SID, stringSid **uint16):(err error)
syscall.ConvertStringSidToSid(stringSid *uint16, sid **SID):(err error)
syscall.CopySid(destSidLen uint32, destSid *SID, srcSid *SID):(err error)
syscall.CreateDirectory(path *uint16, sa *SecurityAttributes):(err error)
syscall.CreateHardLink(filename *uint16, existingfilename *uint16, reserved uintptr):(err error)
syscall.CreatePipe(readhandle *Handle, writehandle *Handle, sa *SecurityAttributes, size uint32):(err error)
syscall.CreateProcess(appName *uint16, commandLine *uint16, procSecurity *SecurityAttributes, threadSecurity *SecurityAttributes, inheritHandles bool, creationFlags uint32, env *uint16, currentDir *uint16, startupInfo *StartupInfo, outProcInfo *ProcessInformation):(err error)
syscall.CreateSymbolicLink(symlinkfilename *uint16, targetfilename *uint16, flags uint32):(err error)
syscall.CryptAcquireContext(provhandle *Handle, container *uint16, provider *uint16, provtype uint32, flags uint32):(err error)
syscall.CryptGenRandom(provhandle Handle, buflen uint32, buf *byte):(err error)
syscall.CryptReleaseContext(provhandle Handle, flags uint32):(err error)
syscall.DeleteFile(path *uint16):(err error)
syscall.DeviceIoControl(handle Handle, ioControlCode uint32, inBuffer *byte, inBufferSize uint32, outBuffer *byte, outBufferSize uint32, bytesReturned *uint32, overlapped *Overlapped):(err error)
syscall.DnsNameCompare(name1 *uint16, name2 *uint16):(same bool)
syscall.DnsQuery(name string, qtype uint16, options uint32, extra *byte, qrs **DNSRecord, pr *byte):(status error)
syscall.DnsRecordListFree(rl *DNSRecord, freetype uint32)
syscall.DuplicateHandle(hSourceProcessHandle Handle, hSourceHandle Handle, hTargetProcessHandle Handle, lpTargetHandle *Handle, dwDesiredAccess uint32, bInheritHandle bool, dwOptions uint32):(err error)
syscall.Environ():[]string
syscall.EscapeArg(s string):string
syscall.Exec(argv0 string, argv []string, envv []string):(err error)
syscall.Exit(code int)
syscall.ExitProcess(exitcode uint32)
syscall.Fchdir(fd Handle):(err error)
syscall.Fchmod(fd Handle, mode uint32):(err error)
syscall.Fchown(fd Handle, uid int, gid int):(err error)
syscall.FindClose(handle Handle):(err error)
syscall.FindNextFile(handle Handle, data *Win32finddata):(err error)
syscall.FlushFileBuffers(handle Handle):(err error)
syscall.FlushViewOfFile(addr uintptr, length uintptr):(err error)
syscall.FormatMessage(flags uint32, msgsrc uint32, msgid uint32, langid uint32, buf []uint16, args *byte):(n uint32, err error)
syscall.FreeAddrInfoW(addrinfo *AddrinfoW)
syscall.FreeEnvironmentStrings(envs *uint16):(err error)
syscall.FreeLibrary(handle Handle):(err error)
syscall.Fsync(fd Handle):(err error)
syscall.Ftruncate(fd Handle, length int64):(err error)
syscall.FullPath(name string):(path string, err error)
syscall.GetAcceptExSockaddrs(buf *byte, rxdatalen uint32, laddrlen uint32, raddrlen uint32, lrsa **RawSockaddrAny, lrsalen *int32, rrsa **RawSockaddrAny, rrsalen *int32)
syscall.GetAdaptersInfo(ai *IpAdapterInfo, ol *uint32):(errcode error)
syscall.GetAddrInfoW(nodename *uint16, servicename *uint16, hints *AddrinfoW, result **AddrinfoW):(sockerr error)
syscall.GetCommandLine():(cmd *uint16)
syscall.GetComputerName(buf *uint16, n *uint32):(err error)
syscall.GetConsoleMode(console Handle, mode *uint32):(err error)
syscall.GetCurrentDirectory(buflen uint32, buf *uint16):(n uint32, err error)
syscall.GetEnvironmentStrings():(envs *uint16, err error)
syscall.GetEnvironmentVariable(name *uint16, buffer *uint16, size uint32):(n uint32, err error)
syscall.GetExitCodeProcess(handle Handle, exitcode *uint32):(err error)
syscall.GetFileAttributes(name *uint16):(attrs uint32, err error)
syscall.GetFileAttributesEx(name *uint16, level uint32, info *byte):(err error)
syscall.GetFileInformationByHandle(handle Handle, data *ByHandleFileInformation):(err error)
syscall.GetFileType(filehandle Handle):(n uint32, err error)
syscall.GetFullPathName(path *uint16, buflen uint32, buf *uint16, fname **uint16):(n uint32, err error)
syscall.GetIfEntry(pIfRow *MibIfRow):(errcode error)
syscall.GetLastError():(lasterr error)
syscall.GetLengthSid(sid *SID):(len uint32)
syscall.GetLongPathName(path *uint16, buf *uint16, buflen uint32):(n uint32, err error)
syscall.GetProcAddress(module Handle, procname string):(proc uintptr, err error)
syscall.GetProcessTimes(handle Handle, creationTime *Filetime, exitTime *Filetime, kernelTime *Filetime, userTime *Filetime):(err error)
syscall.GetQueuedCompletionStatus(cphandle Handle, qty *uint32, key *uint32, overlapped **Overlapped, timeout uint32):(err error)
syscall.GetShortPathName(longpath *uint16, shortpath *uint16, buflen uint32):(n uint32, err error)
syscall.GetStartupInfo(startupInfo *StartupInfo):(err error)
syscall.GetSystemTimeAsFileTime(time *Filetime)
syscall.GetTempPath(buflen uint32, buf *uint16):(n uint32, err error)
syscall.GetTimeZoneInformation(tzi *Timezoneinformation):(rc uint32, err error)
syscall.GetTokenInformation(t Token, infoClass uint32, info *byte, infoLen uint32, returnedLen *uint32):(err error)
syscall.GetUserNameEx(nameFormat uint32, nameBuffre *uint16, nSize *uint32):(err error)
syscall.GetUserProfileDirectory(t Token, dir *uint16, dirLen *uint32):(err error)
syscall.GetVersion():(ver uint32, err error)
syscall.Getegid():(egid int)
syscall.Getenv(key string):(value string, found bool)
syscall.Geteuid():(euid int)
syscall.Getgid():(gid int)
syscall.Getgroups():(gids []int, err error)
syscall.Getpagesize():int
syscall.Getpid():(pid int)
syscall.Getppid():(ppid int)
syscall.Getsockopt(s Handle, level int32, optname int32, optval *byte, optlen *int32):(err error)
syscall.GetsockoptInt(fd Handle, level, opt int):(int, error)
syscall.Gettimeofday(tv *Timeval):(err error)
syscall.Getuid():(uid int)
syscall.Getwd():(wd string, err error)
syscall.Lchown(path string, uid int, gid int):(err error)
syscall.Link(oldpath, newpath string):(err error)
syscall.Listen(s Handle, n int):(err error)
syscall.LoadCancelIoEx():error
syscall.LoadConnectEx():error
syscall.LoadCreateSymbolicLink():error
syscall.LoadGetAddrInfo():error
syscall.LoadSetFileCompletionNotificationModes():error
syscall.LookupAccountName(systemName *uint16, accountName *uint16, sid *SID, sidLen *uint32, refdDomainName *uint16, refdDomainNameLen *uint32, use *uint32):(err error)
syscall.LookupAccountSid(systemName *uint16, sid *SID, name *uint16, nameLen *uint32, refdDomainName *uint16, refdDomainNameLen *uint32, use *uint32):(err error)
syscall.MapViewOfFile(handle Handle, access uint32, offsetHigh uint32, offsetLow uint32, length uintptr):(addr uintptr, err error)
syscall.Mkdir(path string, mode uint32):(err error)
syscall.MoveFile(from *uint16, to *uint16):(err error)
syscall.NetApiBufferFree(buf *byte):(neterr error)
syscall.NetGetJoinInformation(server *uint16, name **uint16, bufType *uint32):(neterr error)
syscall.NetUserGetInfo(serverName *uint16, userName *uint16, level uint32, buf **byte):(neterr error)
syscall.NewCallback(fn interface{}):uintptr
syscall.NewCallbackCDecl(fn interface{}):uintptr
syscall.Ntohs(netshort uint16):(u uint16)
syscall.OpenProcessToken(h Handle, access uint32, token *Token):(err error)
syscall.Pipe(p []Handle):(err error)
syscall.PostQueuedCompletionStatus(cphandle Handle, qty uint32, key uint32, overlapped *Overlapped):(err error)
syscall.Process32First(snapshot Handle, procEntry *ProcessEntry32):(err error)
syscall.Process32Next(snapshot Handle, procEntry *ProcessEntry32):(err error)
syscall.Read(fd Handle, p []byte):(n int, err error)
syscall.ReadConsole(console Handle, buf *uint16, toread uint32, read *uint32, inputControl *byte):(err error)
syscall.ReadDirectoryChanges(handle Handle, buf *byte, buflen uint32, watchSubTree bool, mask uint32, retlen *uint32, overlapped *Overlapped, completionRoutine uintptr):(err error)
syscall.ReadFile(handle Handle, buf []byte, done *uint32, overlapped *Overlapped):(err error)
syscall.Readlink(path string, buf []byte):(n int, err error)
syscall.Recvfrom(fd Handle, p []byte, flags int):(n int, from Sockaddr, err error)
syscall.RegCloseKey(key Handle):(regerrno error)
syscall.RegEnumKeyEx(key Handle, index uint32, name *uint16, nameLen *uint32, reserved *uint32, class *uint16, classLen *uint32, lastWriteTime *Filetime):(regerrno error)
syscall.RegOpenKeyEx(key Handle, subkey *uint16, options uint32, desiredAccess uint32, result *Handle):(regerrno error)
syscall.RegQueryInfoKey(key Handle, class *uint16, classLen *uint32, reserved *uint32, subkeysLen *uint32, maxSubkeyLen *uint32, maxClassLen *uint32, valuesLen *uint32, maxValueNameLen *uint32, maxValueLen *uint32, saLen *uint32, lastWriteTime *Filetime):(regerrno error)
syscall.RegQueryValueEx(key Handle, name *uint16, reserved *uint32, valtype *uint32, buf *byte, buflen *uint32):(regerrno error)
syscall.RemoveDirectory(path *uint16):(err error)
syscall.Rename(oldpath, newpath string):(err error)
syscall.Rmdir(path string):(err error)
syscall.Seek(fd Handle, offset int64, whence int):(newoffset int64, err error)
syscall.Sendto(fd Handle, p []byte, flags int, to Sockaddr):(err error)
syscall.SetCurrentDirectory(path *uint16):(err error)
syscall.SetEndOfFile(handle Handle):(err error)
syscall.SetEnvironmentVariable(name *uint16, value *uint16):(err error)
syscall.SetFileAttributes(name *uint16, attrs uint32):(err error)
syscall.SetFileCompletionNotificationModes(handle Handle, flags uint8):(err error)
syscall.SetFilePointer(handle Handle, lowoffset int32, highoffsetptr *int32, whence uint32):(newlowoffset uint32, err error)
syscall.SetFileTime(handle Handle, ctime *Filetime, atime *Filetime, wtime *Filetime):(err error)
syscall.SetHandleInformation(handle Handle, mask uint32, flags uint32):(err error)
syscall.SetNonblock(fd Handle, nonblocking bool):(err error)
syscall.Setenv(key, value string):error
syscall.Setsockopt(s Handle, level int32, optname int32, optval *byte, optlen int32):(err error)
syscall.SetsockoptIPMreq(fd Handle, level, opt int, mreq *IPMreq):(err error)
syscall.SetsockoptIPv6Mreq(fd Handle, level, opt int, mreq *IPv6Mreq):(err error)
syscall.SetsockoptInet4Addr(fd Handle, level, opt int, value [4]byte):(err error)
syscall.SetsockoptInt(fd Handle, level, opt int, value int):(err error)
syscall.SetsockoptLinger(fd Handle, level, opt int, l *Linger):(err error)
syscall.SetsockoptTimeval(fd Handle, level, opt int, tv *Timeval):(err error)
syscall.Shutdown(fd Handle, how int):(err error)
syscall.StartProcess(argv0 string, argv []string, attr *ProcAttr):(pid int, handle uintptr, err error)
syscall.StringBytePtr(s string):*byte
syscall.StringByteSlice(s string):[]byte
syscall.StringToUTF16(s string):[]uint16
syscall.StringToUTF16Ptr(s string):*uint16
syscall.Symlink(path, link string):(err error)
syscall.Syscall(trap, nargs, a1, a2, a3 uintptr):(r1, r2 uintptr, err Errno)
syscall.Syscall12(trap, nargs, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12 uintptr):(r1, r2 uintptr, err Errno)
syscall.Syscall15(trap, nargs, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15 uintptr):(r1, r2 uintptr, err Errno)
syscall.Syscall6(trap, nargs, a1, a2, a3, a4, a5, a6 uintptr):(r1, r2 uintptr, err Errno)
syscall.Syscall9(trap, nargs, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr):(r1, r2 uintptr, err Errno)
syscall.TerminateProcess(handle Handle, exitcode uint32):(err error)
syscall.TimespecToNsec(ts Timespec):int64
syscall.TranslateAccountName(username string, from, to uint32, initSize int):(string, error)
syscall.TranslateName(accName *uint16, accNameFormat uint32, desiredNameFormat uint32, translatedName *uint16, nSize *uint32):(err error)
syscall.TransmitFile(s Handle, handle Handle, bytesToWrite uint32, bytsPerSend uint32, overlapped *Overlapped, transmitFileBuf *TransmitFileBuffers, flags uint32):(err error)
syscall.UTF16FromString(s string):([]uint16, error)
syscall.UTF16PtrFromString(s string):(*uint16, error)
syscall.UTF16ToString(s []uint16):string
syscall.Unlink(path string):(err error)
syscall.UnmapViewOfFile(addr uintptr):(err error)
syscall.Unsetenv(key string):error
syscall.Utimes(path string, tv []Timeval):(err error)
syscall.UtimesNano(path string, ts []Timespec):(err error)
syscall.VirtualLock(addr uintptr, length uintptr):(err error)
syscall.VirtualUnlock(addr uintptr, length uintptr):(err error)
syscall.WSACleanup():(err error)
syscall.WSAEnumProtocols(protocols *int32, protocolBuffer *WSAProtocolInfo, bufferLength *uint32):(n int32, err error)
syscall.WSAIoctl(s Handle, iocc uint32, inbuf *byte, cbif uint32, outbuf *byte, cbob uint32, cbbr *uint32, overlapped *Overlapped, completionRoutine uintptr):(err error)
syscall.WSARecv(s Handle, bufs *WSABuf, bufcnt uint32, recvd *uint32, flags *uint32, overlapped *Overlapped, croutine *byte):(err error)
syscall.WSARecvFrom(s Handle, bufs *WSABuf, bufcnt uint32, recvd *uint32, flags *uint32, from *RawSockaddrAny, fromlen *int32, overlapped *Overlapped, croutine *byte):(err error)
syscall.WSASend(s Handle, bufs *WSABuf, bufcnt uint32, sent *uint32, flags uint32, overlapped *Overlapped, croutine *byte):(err error)
syscall.WSASendTo(s Handle, bufs *WSABuf, bufcnt uint32, sent *uint32, flags uint32, to *RawSockaddrAny, tolen int32, overlapped *Overlapped, croutine *byte):(err error)
syscall.WSASendto(s Handle, bufs *WSABuf, bufcnt uint32, sent *uint32, flags uint32, to Sockaddr, overlapped *Overlapped, croutine *byte):(err error)
syscall.WSAStartup(verreq uint32, data *WSAData):(sockerr error)
syscall.WaitForSingleObject(handle Handle, waitMilliseconds uint32):(event uint32, err error)
syscall.Write(fd Handle, p []byte):(n int, err error)
syscall.WriteConsole(console Handle, buf *uint16, towrite uint32, written *uint32, reserved *byte):(err error)
syscall.WriteFile(handle Handle, buf []byte, done *uint32, overlapped *Overlapped):(err error)
syscall.CertCreateCertificateContext(certEncodingType uint32, certEncoded *byte, encodedLen uint32):(context *CertContext, err error)
syscall.CertEnumCertificatesInStore(store Handle, prevContext *CertContext):(context *CertContext, err error)
syscall.LoadDLL(name string):(dll *DLL, err error)
syscall.MustLoadDLL(name string):*DLL
syscall.NsecToFiletime(nsec int64):(ft Filetime)
syscall.Accept(fd Handle):(nfd Handle, sa Sockaddr, err error)
syscall.CertOpenStore(storeProvider uintptr, msgAndCertEncodingType uint32, cryptProv uintptr, flags uint32, para uintptr):(handle Handle, err error)
syscall.CertOpenSystemStore(hprov Handle, name *uint16):(store Handle, err error)
syscall.CreateFile(name *uint16, access uint32, mode uint32, sa *SecurityAttributes, createmode uint32, attrs uint32, templatefile int32):(handle Handle, err error)
syscall.CreateFileMapping(fhandle Handle, sa *SecurityAttributes, prot uint32, maxSizeHigh uint32, maxSizeLow uint32, name *uint16):(handle Handle, err error)
syscall.CreateIoCompletionPort(filehandle Handle, cphandle Handle, key uint32, threadcnt uint32):(handle Handle, err error)
syscall.CreateToolhelp32Snapshot(flags uint32, processId uint32):(handle Handle, err error)
syscall.FindFirstFile(name *uint16, data *Win32finddata):(handle Handle, err error)
syscall.GetCurrentProcess():(pseudoHandle Handle, err error)
syscall.GetStdHandle(stdhandle int):(handle Handle, err error)
syscall.LoadLibrary(libname string):(handle Handle, err error)
syscall.LocalFree(hmem Handle):(handle Handle, err error)
syscall.Open(path string, mode int, perm uint32):(fd Handle, err error)
syscall.OpenProcess(da uint32, inheritHandle bool, pid uint32):(handle Handle, err error)
syscall.Socket(domain, typ, proto int):(fd Handle, err error)
syscall.GetHostByName(name string):(h *Hostent, err error)
syscall.NewLazyDLL(name string):*LazyDLL
syscall.GetProtoByName(name string):(p *Protoent, err error)
syscall.LookupSID(system, account string):(sid *SID, domain string, accType uint32, err error)
syscall.StringToSid(s string):(*SID, error)
syscall.GetServByName(name string, proto string):(s *Servent, err error)
syscall.Getpeername(fd Handle):(sa Sockaddr, err error)
syscall.Getsockname(fd Handle):(sa Sockaddr, err error)
syscall.NsecToTimespec(nsec int64):(ts Timespec)
syscall.NsecToTimeval(nsec int64):(tv Timeval)
syscall.OpenCurrentProcessToken():(Token, error)
testing.AllocsPerRun(runs int, f func()):(avg float64)
testing.Coverage():float64
testing.Main(matchString func(pat, str string):(bool, error), tests []InternalTest, benchmarks []InternalBenchmark, examples []InternalExample)
testing.RegisterCover(c Cover)
testing.RunBenchmarks(matchString func(pat, str string):(bool, error), benchmarks []InternalBenchmark)
testing.RunExamples(matchString func(pat, str string):(bool, error), examples []InternalExample):(ok bool)
testing.RunTests(matchString func(pat, str string):(bool, error), tests []InternalTest):(ok bool)
testing.Short():bool
testing.Verbose():bool
testing.Benchmark(f func(b *B)):BenchmarkResult
testing.MainStart(matchString func(pat, str string):(bool, error), tests []InternalTest, benchmarks []InternalBenchmark, examples []InternalExample):*M
time.After(d Duration) <-chan Time
time.Sleep(d Duration)
time.Tick(d Duration) <-chan Time
time.ParseDuration(s string):(Duration, error)
time.Since(t Time):Duration
time.FixedZone(name string, offset int):*Location
time.LoadLocation(name string):(*Location, error)
time.NewTicker(d Duration):*Ticker
time.Date(year int, month Month, day, hour, min, sec, nsec int, loc *Location):Time
time.Now():Time
time.Parse(layout, value string):(Time, error)
time.ParseInLocation(layout, value string, loc *Location):(Time, error)
time.Unix(sec int64, nsec int64):Time
time.AfterFunc(d Duration, f func()):*Timer
time.NewTimer(d Duration):*Timer
unicode.In(r rune, ranges ...*RangeTable):bool
unicode.Is(rangeTab *RangeTable, r rune):bool
unicode.IsControl(r rune):bool
unicode.IsDigit(r rune):bool
unicode.IsGraphic(r rune):bool
unicode.IsLetter(r rune):bool
unicode.IsLower(r rune):bool
unicode.IsMark(r rune):bool
unicode.IsNumber(r rune):bool
unicode.IsOneOf(ranges []*RangeTable, r rune):bool
unicode.IsPrint(r rune):bool
unicode.IsPunct(r rune):bool
unicode.IsSpace(r rune):bool
unicode.IsSymbol(r rune):bool
unicode.IsTitle(r rune):bool
unicode.IsUpper(r rune):bool
unicode.SimpleFold(r rune):rune
unicode.To(_case int, r rune):rune
unicode.ToLower(r rune):rune
unicode.ToTitle(r rune):rune
unicode.ToUpper(r rune):rune
unsafe.Alignof(x ArbitraryType):uintptr
unsafe.Offsetof(x ArbitraryType):uintptr
unsafe.Sizeof(x ArbitraryType):uintptr
