ADD_CUSTOM_COMMAND(OUTPUT output1 [output2 ...] COMMAND command1 [ARGS] [args1...] [COMMAND command2 [ARGS] [args2...] ...] [MAIN_DEPENDENCY depend] [DEPENDS [depends...]] [WORKING_DIRECTORY dir] [COMMENT comment] [VERBATIM] [APPEND])
ADD_CUSTOM_COMMAND(TARGET target PRE_BUILD | PRE_LINK | POST_BUILD COMMAND command1 [ARGS] [args1...] [COMMAND command2 [ARGS] [args2...] ...] [WORKING_DIRECTORY dir] [COMMENT comment] [VERBATIM])
ADD_CUSTOM_TARGET(Name [ALL] [command1 [args1...]] [COMMAND command2 [args2...] ...] [DEPENDS depend depend depend ... ] [WORKING_DIRECTORY dir] [COMMENT comment] [VERBATIM])
ADD_DEFINITIONS(-DFOO -DBAR ...)
ADD_DEPENDENCIES(target-name depend-target1 depend-target2 ...)
ADD_EXECUTABLE(exename [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] source1 source2 ... sourceN)
ADD_LIBRARY(libname [SHARED | STATIC | MODULE] [EXCLUDE_FROM_ALL] source1 source2 ... sourceN)
ADD_SUBDIRECTORY(source_dir [binary_dir] [EXCLUDE_FROM_ALL])
ADD_TEST(testname Exename arg1 arg2 ...)
AUX_SOURCE_DIRECTORY(dir VARIABLE)
BUILD_COMMAND(variable MAKECOMMAND)
BUILD_NAME(variable)
CMAKE_MINIMUM_REQUIRED(VERSION versionNumber [FATAL_ERROR])
CONFIGURE_FILE(InputFile OutputFile [COPYONLY] [ESCAPE_QUOTES] [@ONLY])
CREATE_TEST_SOURCELIST(SourceListName DriverName test1 test2 test3 EXTRA_INCLUDE include.h FUNCTION function)
ELSE(expression)
ELSEIF(expression)
ENABLE_LANGUAGE(languageName)
ENABLE_TESTING()
ENDFOREACH(expression)
ENDIF(expression)
ENDMACRO(expression)
ENDWHILE(expression)
EXEC_PROGRAM(Executable [directory in which to run] [ARGS <arguments to executable>] [OUTPUT_VARIABLE <var>] [RETURN_VALUE <var>])
EXECUTE_PROCESS(COMMAND <cmd1> [args1...]] [COMMAND <cmd2> [args2...] [...]] [WORKING_DIRECTORY <directory>] [TIMEOUT <seconds>] [RESULT_VARIABLE <variable>] [OUTPUT_VARIABLE <variable>] [ERROR_VARIABLE <variable>] [INPUT_FILE <file>] [OUTPUT_FILE <file>] [ERROR_FILE <file>] [OUTPUT_QUIET] [ERROR_QUIET] [OUTPUT_STRIP_TRAILING_WHITESPACE] [ERROR_STRIP_TRAILING_WHITESPACE])
EXPORT_LIBRARY_DEPENDENCIES(FILE [APPEND])
FILE(WRITE filename "message to write"... )
FIND_FILE(<VAR> name1 path1 path2 ...)
FIND_LIBRARY(<VAR> name1 path1 path2 ...)
FIND_PACKAGE(<name> [major.minor] [QUIET] [NO_MODULE] [[REQUIRED|COMPONENTS] [componets...]])
FIND_PATH(<VAR> name1 path1 path2 ...)
FIND_PROGRAM(<VAR> name1 path1 path2 ...)
FLTK_WRAP_UI(resultingLibraryName source1 source2 ... sourceN)
FOREACH(loop_var arg1 arg2 ...)
GET_CMAKE_PROPERTY(VAR property)
GET_DIRECTORY_PROPERTY(VAR [DIRECTORY dir] property)
GET_FILENAME_COMPONENT(VarName FileName PATH|ABSOLUTE|NAME|EXT|NAME_WE [CACHE])
GET_FILENAME_COMPONENT(VarName FileName PROGRAM [PROGRAM_ARGS ArgVar] [CACHE])
GET_SOURCE_FILE_PROPERTY(VAR file property)
GET_TARGET_PROPERTY(VAR target property)
GET_TEST_PROPERTY(test VAR property)
IF(variable)
INCLUDE(file1 [OPTIONAL])
INCLUDE_DIRECTORIES([AFTER|BEFORE] [SYSTEM] dir1 dir2 ...)
INCLUDE_EXTERNAL_MSPROJECT(projectname location dep1 dep2 ...)
INCLUDE_REGULAR_EXPRESSION(regex_match [regex_complain])
INSTALL([[SCRIPT <file>] [CODE <code>]] [...])
INSTALL_FILES(<dir> extension file file ...)
INSTALL_PROGRAMS(<dir> file1 file2 [file3 ...])
INSTALL_TARGETS(<dir> [RUNTIME_DIRECTORY dir] target target)
LINK_DIRECTORIES(directory1 directory2 ...)
LINK_LIBRARIES(library1 <debug | optimized> library2 ...)
LIST(LENGTH <list> <output variable>)
LOAD_CACHE(pathToCacheFile READ_WITH_PREFIX prefix entry1...)
LOAD_COMMAND(COMMAND_NAME <loc1> [loc2 ...])
MACRO(<name> [arg1 [arg2 [arg3 ...]]])
MAKE_DIRECTORY(directory)
MARK_AS_ADVANCED([CLEAR|FORCE] VAR VAR2 VAR...)
MATH(EXPR <output variable> <math expression>)
MESSAGE([SEND_ERROR | STATUS | FATAL_ERROR] "message to display" ...)
OPTION(OPTION_VAR "help string describing option" [initial value])
OUTPUT_REQUIRED_FILES(srcfile outputfile)
PROJECT(projectname [CXX] [C] [Java])
QT_WRAP_CPP(resultingLibraryName DestName SourceLists ...)
QT_WRAP_UI(resultingLibraryName HeadersDestName SourcesDestName SourceLists ...)
REMOVE(VAR VALUE VALUE ...)
REMOVE_DEFINITIONS(-DFOO -DBAR ...)
SEPARATE_ARGUMENTS(VARIABLE)
SET(VAR [VALUE] [CACHE TYPE DOCSTRING [FORCE]])
SET_DIRECTORY_PROPERTIES(PROPERTIES prop1 value1 prop2 value2)
SET_SOURCE_FILES_PROPERTIES(file1 file2 ... PROPERTIES prop1 value1 prop2 value2 ...)
SET_TARGET_PROPERTIES(target1 target2 ... PROPERTIES prop1 value1 prop2 value2 ...)
SET_TESTS_PROPERTIES(test1 [test2...] PROPERTIES prop1 value1 prop2 value2)
SITE_NAME(variable)
SOURCE_GROUP(name [REGULAR_EXPRESSION regex] [FILES src1 src2 ...])
STRING(REGEX MATCH <regular_expression> <output variable> <input> [<input>...])
SUBDIR_DEPENDS(subdir dep1 dep2 ...)
SUBDIRS(dir1 dir2 ...[EXCLUDE_FROM_ALL exclude_dir1 exclude_dir2 ...] [PREORDER] )
TARGET_LINK_LIBRARIES(target library1 <debug | optimized> library2 ...)
TRY_COMPILE(RESULT_VAR bindir srcdir projectName <targetname> <CMAKE_FLAGS <Flags>> <OUTPUT_VARIABLE var>)
TRY_RUN(RUN_RESULT_VAR COMPILE_RESULT_VAR bindir srcfile <CMAKE_FLAGS <Flags>> <COMPILE_DEFINITIONS <flags>> <OUTPUT_VARIABLE var> <ARGS <arg1> <arg2>...>)
USE_MANGLED_MESA(PATH_TO_MESA OUTPUT_DIRECTORY)
UTILITY_SOURCE(cache_entry executable_name path_to_source [file1 file2 ...])
VARIABLE_REQUIRES(TEST_VARIABLE RESULT_VARIABLE REQUIRED_VARIABLE1 REQUIRED_VARIABLE2 ...)
VTK_MAKE_INSTANTIATOR(className outSourceList src-list1 [src-list2 ..] EXPORT_MACRO exportMacro [HEADER_LOCATION dir] [GROUP_SIZE groupSize] [INCLUDES [file1 file2 ..]])
VTK_WRAP_JAVA(resultingLibraryName SourceListName class1 class2 ...)
VTK_WRAP_PYTHON(resultingLibraryName SourceListName class1 class2 ...)
VTK_WRAP_TCL(resultingLibraryName [SOURCES] SourceListName class1 class2 ... [COMMANDS CommandName1 CommandName2 ...])
WHILE(condition)
WRITE_FILE(filename "message to write"... [APPEND])