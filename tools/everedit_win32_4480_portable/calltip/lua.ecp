assert(v [, message])
collectgarbage([limit])
coroutine.create(f)
coroutine.resume(co, val1, ...)
coroutine.status(co)
coroutine.wrap(f)
coroutine.yield(val1, ...)
debug.debug()
debug.gethook()
debug.getinfo(function [, what])
debug.getlocal(level, local)
debug.getupvalue(func, up)
debug.sethook(hook, mask [, count])
debug.setlocal(level, local, value)
debug.setupvalue(func, up, value)
debug.traceback([message])
dofile(filename)
error(message [, level])
getfenv(f)
getmetatable(object)
io.close([file])
io.flush()
io.input([file])
io.lines([filename])
io.open(filename [, mode])
io.output([file])
io.read(format1, ...)
io.tmpfile()
io.type(obj)
io.write(value1, ...)
ipairs(t)
loadfile(filename)
loadlib(libname, funcname)
loadstring(string [, chunkname])
math.abs(v)
math.acos(v)
math.asin(v)
math.atan(v)
math.atan2(v1, v2)
math.ceil(v)
math.cos(rad)
math.deg(rad)
math.exp(v)
math.floor(v)
math.frexp(v)
math.ldexp(v1, v2)
math.log(v)
math.log10(v)
math.max(v1, ...)
math.min(v1, ...)
math.mod(v1, v2)
math.pow(v1, v2)
math.rad(deg)
math.random([n [, u]])
math.randomseed(seed)
math.sin(rad)
math.sqrt(v)
math.tan(rad)
next(table [, index])
os.clock()
os.date([format [, time]])
os.difftime(t2, t1)
os.execute(command)
os.exit([code])
os.getenv(varname)
os.remove(filename)
os.rename(oldname, newname)
os.setlocale(locale [, category])
os.time([table])
os.tmpname()
pairs(t)
pcall(f, arg1, arg2, ...)
print(e1, e2, ...)
rawequal(v1, v2)
rawget(table, index)
rawset(table, index, value)
require(packagename)
setfenv(f, table)
setmetatable(table, metatable)
string.byte(s [, i])
string.char(i1, i2, ...)
string.dump(function)
string.find(s, pattern [, init [, plain]])
string.format(formatstring, e1, e2, ...)
string.gfind(s, pat)
string.gsub(s, pat, repl [, n])
string.len(s)
string.lower(s)
string.rep(s, n)
string.sub(s, i [, j])
string.upper(s)
table.concat(table [, sep [, i [, j]]])
table.foreach(table, f)
table.foreachi(table, f)
table.getn(table)
table.insert(table, [pos,] value)
table.remove(table [, pos])
table.setn(table, n)
table.sort(table [, comp])
tonumber(e [, base])
tostring(e)
type(v)
unpack(list)
xpcall(f, err)
