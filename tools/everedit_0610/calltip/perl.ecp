abs(VALUE)\nReturns the absolute value of its argument.
accept(NEWSOCKET,GENERICSOCKET)\nAccepts an incoming socket connect, just as the accept(2) system calldoes.
alarm(SECONDS)\nArranges to have a SIGALRM delivered to this process after thespecified number of seconds have elapsed.
atan(2 Y,X)\nReturns the arctangent of Y/X in the range -PI to PI.
bind(SOCKET,NAME)\nBinds a network address to a socket, just as the bind system calldoes.
binmode(FILEHANDLE, DISCIPLINE)\nArranges for FILEHANDLE to be read or written in "binary" or "text" modeon systems where the run-time libraries distinguish between binary andtext files.
bless(REF,CLASSNAME)\nThis function tells the thingy referenced by REF that it is now an objectin the CLASSNAME package.
caller(EXPR)\nReturns the context of the current subroutine call.
chdir(EXPR)\nChanges the working directory to EXPR, if possible.
chmod(LIST)\nChanges the permissions of a list of files.
chomp(VARIABLE)\nThis safer version of L</chop> removes any trailing stringthat corresponds to the current value of C<$/> (also known asnumber of characters removed from all its arguments.
chop(VARIABLE)\nChops off the last character of a string and returns the characterchopped.
chown(LIST)\nChanges the owner (and group) of a list of files.
chr(NUMBER)\nReturns the character represented by that NUMBER in the character set.
chroot(FILENAME)\nThis function works like the system call by the same name: it makes thenamed directory the new root directory for all further pathnames thatbegin with a C</> by your process and all its children.
close(FILEHANDLE)\nCloses the file or pipe associated with the file handle, returning trueonly if stdio successfully flushes buffers and closes the system filedescriptor.
closedir(DIRHANDLE)\nCloses a directory opened by opendir and returns the success of thatsystem call.
connect(SOCKET,NAME)\nAttempts to connect to a remote socket, just as the connect system calldoes.
continue(BLOCK)\nActually a flow control statement rather than a function.
cos(EXPR)\nReturns the cosine of EXPR (expressed in radians).
crypt(PLAINTEXT,SALT)\nEncrypts a string exactly like the crypt(3) function in the C libraryextirpated as a potential munition).
dbmclose(HASH)\nBreaks the binding between a DBM file and a hash.
dbmopen(HASH,DBNAME,MASK)\nThis binds a dbm(3), ndbm(3), sdbm(3), gdbm(3), or Berkeley DB file to ahash.
defined(EXPR)\nReturns a Boolean value telling whether EXPR has a value other thanthe undefined value undef .
delete(EXPR)\nGiven an expression that specifies a hash element, array element, hash slice,or array slice, deletes the specified element(s) from the hash or array.
die(LIST)\nOutside an eval , prints the value of LIST to STDERR andexits with the current value of C<$!> (errno).
do(BLOCK)\nNot really a function.
do(SUBROUTINE(LIST))\nA deprecated form of subroutine call.
do(EXPR)\nUses the value of EXPR as a filename and executes the contents of thefile as a Perl script.
dump(LABEL)\nThis function causes an immediate core dump.
each(HASH)\nWhen called in list context, returns a 2-element list consisting of thekey and value for the next element of a hash, so that you can iterate overit.
eof(FILEHANDLE)\nReturns 1 if the next read on FILEHANDLE will return end of file, or ifFILEHANDLE is not open.
eval(EXPR)\nIn the first form, the return value of EXPR is parsed and executed as if itwere a little Perl program.
exec(LIST)\nThe exec function executes a system command I<and never returns>--use system instead of exec if you want it to return.
exists(EXPR)\nGiven an expression that specifies a hash element or array element,returns true if the specified element in the hash or array has everbeen initialized, even if the corresponding value is undefined.
exit(EXPR)\nEvaluates EXPR and exits immediately with that value.
exp(EXPR)\nReturns I<e> (the natural logarithm base) to the power of EXPR.
fcntl(FILEHANDLE,FUNCTION,SCALAR)\nImplements the fcntl(2) function.
fileno(FILEHANDLE)\nReturns the file descriptor for a filehandle, or undefined if thefilehandle is not open.
flock(FILEHANDLE,OPERATION)\nCalls flock(2), or an emulation of it, on FILEHANDLE.
fork()\nDoes a fork(2)\nsystem call to create a new process running thesame program at the same point.
format()\nDeclare a picture format for use by the write function.
formline(PICTURE,LIST)\nThis is an internal function used by format s, though you may call it,too.
getc(FILEHANDLE)\nReturns the next character from the input file attached to FILEHANDLE,or the undefined value at end of file, or if there was an error.
getlogin()\nImplements the C library function of the same name, which on mostsystems returns the current login from F</etc/utmp>, if any.
getpeername(SOCKET)\nReturns the packed sockaddr address of other end of the SOCKET connection.
getpgrp(PID)\nReturns the current process group for the specified PID.
getppid()\nReturns the process id of the parent process.
getpriority(WHICH,WHO)\nReturns the current priority for a process, a process group, or a user.
getpwnam(NAME)\nThese routines perform the same functions as their counterparts in thesystem library.
getsockname(SOCKET)\nReturns the packed sockaddr address of this end of the SOCKET connection,in case you don't know the address because you have several differentIPs that the connection might have come in on.
getsockopt(SOCKET,LEVEL,OPTNAME)\nReturns the socket option requested, or undef if there is an error.
glob(EXPR)\nReturns the value of EXPR with filename expansions such as thestandard Unix shell F</bin/csh> would do.
gmtime(EXPR)\nConverts a time as returned by the time function to a 8-element listwith the time localized for the standard Greenwich time zone.
goto(LABEL)\nThe goto-LABEL form finds the statement labeled with LABEL and resumesexecution there.
grep(BLOCK LIST)\nThis is similar in spirit to, but not the same as, grep(1) and itsrelatives.
hex(EXPR)\nInterprets EXPR as a hex string and returns the corresponding value.
import()\nThere is no builtin import function.
index(STR,SUBSTR,POSITION)\nThe index function searches for one string within another, but withoutthe wildcard-like behavior of a full regular-expression pattern match.
int(EXPR)\nReturns the integer portion of EXPR.
ioctl(FILEHANDLE,FUNCTION,SCALAR)\nImplements the ioctl(2) function.
join(EXPR,LIST)\nJoins the separate strings of LIST into a single string with fieldsseparated by the value of EXPR, and returns that new string.
keys(HASH)\nReturns a list consisting of all the keys of the named hash.
kill(SIGNAL, LIST)\nSends a signal to a list of processes.
last(LABEL)\nThe last command is like the break statement in C (as used inloops); it immediately exits the loop in question.
lc(EXPR)\nReturns an lowercased version of EXPR.
lcfirst(EXPR)\nReturns the value of EXPR with the first character lowercased.
length(EXPR)\nReturns the length in characters of the value of EXPR.
link(OLDFILE,NEWFILE)\nCreates a new filename linked to the old filename.
listen(SOCKET,QUEUESIZE)\nDoes the same thing that the listen system call does.
local(EXPR)\nYou really probably want to be using my instead, because local isn'twhat most people think of as "local".
localtime(EXPR)\nConverts a time as returned by the time function to a 9-element listwith the time analyzed for the local time zone.
lock()\nThis function places an advisory lock on a variable, subroutine,or referenced object contained in I<THING> until the lock goes outof scope.
log(EXPR)\nReturns the natural logarithm (base I<e>) of EXPR.
lstat(FILEHANDLE)\nDoes the same thing as the stat function (including setting thespecial C<_> filehandle) but stats a symbolic link instead of the filethe symbolic link points to.
m(//)\nThe match operator.
map(BLOCK LIST)\nEvaluates the BLOCK or EXPR for each element of LIST (locally settingC<$_> to each element) and returns the list value composed of theresults of each such evaluation.
mkdir(FILENAME,MASK)\nCreates the directory specified by FILENAME, with permissionsspecified by MASK (as modified by umask ).
msgctl(ID,CMD,ARG)\nCalls the System V IPC function msgctl(2).
msgget(KEY,FLAGS)\nCalls the System V IPC function msgget(2).
msgrcv(ID,VAR,SIZE,TYPE,FLAGS)\nCalls the System V IPC function msgrcv to receive a message frommessage queue ID into variable VAR with a maximum message size ofSIZE.
msgsnd(ID,MSG,FLAGS)\nCalls the System V IPC function msgsnd to send the message MSG to themessage queue ID.
my(EXPR)\nA my declares the listed variables to be local (lexically) to theenclosing block, file, or eval .
next(LABEL)\nThe next command is like the continue statement in C; it startsthe next iteration of the loop:Note that if there were a continue block on the above, it would getexecuted even on discarded lines.
no(Module LIST)\nSee the L</use> function, which no is the opposite of.
oct(EXPR)\nInterprets EXPR as an octal string and returns the correspondingvalue.
open(FILEHANDLE,MODE,LIST)\nOpens the file whose filename is given by EXPR, and associates it withFILEHANDLE.
opendir(DIRHANDLE,EXPR)\nOpens a directory named EXPR for processing by readdir , telldir , seekdir , rewinddir , and closedir .
ord(EXPR)\nReturns the numeric (ASCII or Unicode) value of the first character of EXPR.
our(EXPR)\nAn our declares the listed variables to be valid globals withinthe enclosing block, file, or eval .
pack(TEMPLATE,LIST)\nTakes a LIST of values and converts it into a string using the rulesgiven by the TEMPLATE.
package(NAMESPACE)\nDeclares the compilation unit as being in the given namespace.
pipe(READHANDLE,WRITEHANDLE)\nOpens a pair of connected pipes like the corresponding system call.
pop(ARRAY)\nPops and returns the last value of the array, shortening the array byone element.
pos(SCALAR)\nReturns the offset of where the last C<m//g> search left off for the variablein question (C<$_> is used when the variable is not specified).
print(FILEHANDLE LIST)\nPrints a string or a list of strings.
printf(FILEHANDLE FORMAT, LIST)\nEquivalent to C<print FILEHANDLE sprintf(FORMAT, LIST)>, except that C<$\>of the list will be interpreted as the printf format.
prototype(FUNCTION)\nReturns the prototype of a function as a string (or undef if thefunction has no prototype).
push(ARRAY,LIST)\nTreats ARRAY as a stack, and pushes the values of LISTonto the end of ARRAY.
q(/STRING/)\nGeneralized quotes.
quotemeta(EXPR)\nReturns the value of EXPR with all non-"word"characters backslashed.
rand(EXPR)\nReturns a random fractional number greater than or equal to 0 and lessthan the value of EXPR.
read(FILEHANDLE,SCALAR,LENGTH,OFFSET)\nAttempts to read LENGTH bytes of data into variable SCALAR from thespecified FILEHANDLE.
readdir(DIRHANDLE)\nReturns the next directory entry for a directory opened by opendir .
readline(EXPR)\nReads from the filehandle whose typeglob is contained in EXPR.
readlink(EXPR)\nReturns the value of a symbolic link, if symbolic links areimplemented.
readpipe(EXPR)\nEXPR is executed as a system command.
recv(SOCKET,SCALAR,LENGTH,FLAGS)\nReceives a message on a socket.
redo(LABEL)\nThe redo command restarts the loop block without evaluating theconditional again.
ref(EXPR)\nReturns a true value if EXPR is a reference, false otherwise.
rename(OLDNAME,NEWNAME)\nChanges the name of a file; an existing file NEWNAME will beclobbered.
require(VERSION)\nDemands some semantics specified by EXPR, or by C<$_> if EXPR is notsupplied.
reset(EXPR)\nGenerally used in a continue block at the end of a loop to clearvariables and reset C<??> searches so that they work again.
return(EXPR)\nReturns from a subroutine, eval , or C<do FILE> with the value given in EXPR.
reverse(LIST)\nIn list context, returns a list value consisting of the elementsof LIST in the opposite order.
rewinddir(DIRHANDLE)\nSets the current position to the beginning of the directory for the readdir routine on DIRHANDLE.
rindex(STR,SUBSTR,POSITION)\nWorks just like index() except that it returns the position of the LASToccurrence of SUBSTR in STR.
rmdir(FILENAME)\nDeletes the directory specified by FILENAME if that directory is empty.
s(///)\nThe substitution operator.
scalar(EXPR)\nForces EXPR to be interpreted in scalar context and returns the valueof EXPR.
seek(FILEHANDLE,POSITION,WHENCE)\nSets FILEHANDLE's position, just like the fseek call of stdio .
seekdir(DIRHANDLE,POS)\nSets the current position for the readdir routine on DIRHANDLE.
select(FILEHANDLE)\nReturns the currently selected filehandle.
select(RBITS,WBITS,EBITS,TIMEOUT)\nThis calls the select(2) system call with the bit masks specified, whichcan be constructed using fileno and vec , along these lines:If you want to select on many filehandles you might wish to write asubroutine:The usual idiom is:or to block until something becomes ready just do thisMost systems do not bother to return anything useful in $timeleft, socalling select()\nin scalar context just returns $nfound.
semctl(ID,SEMNUM,CMD,ARG)\nCalls the System V IPC function semctl .
semget(KEY,NSEMS,FLAGS)\nCalls the System V IPC function semget.
semop(KEY,OPSTRING)\nCalls the System V IPC function semop to perform semaphore operationssuch as signaling and waiting.
send(SOCKET,MSG,FLAGS,TO)\nSends a message on a socket.
setpgrp(PID,PGRP)\nSets the current process group for the specified PID, 0 for the currentprocess.
setpriority(WHICH,WHO,PRIORITY)\nSets the current priority for a process, a process group, or a user.
setsockopt(SOCKET,LEVEL,OPTNAME,OPTVAL)\nSets the socket option requested.
shift(ARRAY)\nShifts the first value of the array off and returns it, shortening thearray by 1 and moving everything down.
shmctl(ID,CMD,ARG)\nCalls the System V IPC function shmctl.
shmget(KEY,SIZE,FLAGS)\nCalls the System V IPC function shmget.
shmread(ID,VAR,POS,SIZE)\nReads or writes the System V shared memory segment ID starting atposition POS for size SIZE by attaching to it, copying in/out, anddetaching from it.
shutdown(SOCKET,HOW)\nShuts down a socket connection in the manner indicated by HOW, whichhas the same interpretation as in the system call of the same name.
sin(EXPR)\nReturns the sine of EXPR (expressed in radians).
sleep(EXPR)\nCauses the script to sleep for EXPR seconds, or forever if no EXPR.
socket(SOCKET,DOMAIN,TYPE,PROTOCOL)\nOpens a socket of the specified kind and attaches it to filehandleSOCKET.
socketpair(SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL)\nCreates an unnamed pair of sockets in the specified domain, of thespecified type.
sort(SUBNAME LIST)\nSorts the LIST and returns the sorted list value.
splice(ARRAY,OFFSET,LENGTH,LIST)\nRemoves the elements designated by OFFSET and LENGTH from an array, andreplaces them with the elements of LIST, if any.
split(/PATTERN/,EXPR,LIMIT)\nSplits a string into a list of strings and returns that list.
sprintf(FORMAT, LIST)\nReturns a string formatted by the usual printf conventions of the Clibrary function sprintf .
sqrt(EXPR)\nReturn the square root of EXPR.
srand(EXPR)\nSets the random number seed for the rand operator.
stat(FILEHANDLE)\nReturns a 13-element list giving the status info for a file, eitherthe file opened via FILEHANDLE, or named by EXPR.
study(SCALAR)\nTakes extra time to study SCALAR (C<$_> if unspecified) in anticipation ofdoing many pattern matches on the string before it is next modified.
sub(BLOCK)\nThis is subroutine definition, not a real function I<per se>.
substr(EXPR,OFFSET,LENGTH,REPLACEMENT)\nExtracts a substring out of EXPR and returns it.
symlink(OLDFILE,NEWFILE)\nCreates a new filename symbolically linked to the old filename.
syscall(LIST)\nCalls the system call specified as the first element of the list,passing the remaining elements as arguments to the system call.
sysopen(FILEHANDLE,FILENAME,MODE)\nOpens the file whose filename is given by FILENAME, and associates itwith FILEHANDLE.
sysread(FILEHANDLE,SCALAR,LENGTH,OFFSET)\nAttempts to read LENGTH bytes of data into variable SCALAR from thespecified FILEHANDLE, using the system call read(2).
sysseek(FILEHANDLE,POSITION,WHENCE)\nSets FILEHANDLE's system position using the system call lseek(2).
system(LIST)\nDoes exactly the same thing as C<exec LIST>, except that a fork isdone first, and the parent process waits for the child process tocomplete.
syswrite(FILEHANDLE,SCALAR,LENGTH,OFFSET)\nAttempts to write LENGTH bytes of data from variable SCALAR to thespecified FILEHANDLE, using the system call write(2).
tell(FILEHANDLE)\nReturns the current position for FILEHANDLE, or -1 on error.
telldir(DIRHANDLE)\nReturns the current position of the readdir routines on DIRHANDLE.
tie(VARIABLE,CLASSNAME,LIST)\nThis function binds a variable to a package class that will provide theimplementation for the variable.
tied(VARIABLE)\nReturns a reference to the object underlying VARIABLE (the same valuethat was originally returned by the tie call that bound the variableto a package.
time()\nReturns the number of non-leap seconds since whatever time the systemconsiders to be the epoch (that's 00:00:00, January 1, 1904 for MacOS,and 00:00:00 UTC, January 1, 1970 for most other systems).
times()\nReturns a four-element list giving the user and system times, inseconds, for this process and the children of this process.
tr(///)\nThe transliteration operator.
truncate(FILEHANDLE,LENGTH)\nTruncates the file opened on FILEHANDLE, or named by EXPR, to thespecified length.
uc(EXPR)\nReturns an uppercased version of EXPR.
ucfirst(EXPR)\nReturns the value of EXPR with the first characterin uppercase (titlecase in Unicode).
umask(EXPR)\nSets the umask for the process to EXPR and returns the previous value.
undef(EXPR)\nUndefines the value of EXPR, which must be an lvalue.
unlink(LIST)\nDeletes a list of files.
unpack(TEMPLATE,EXPR)\n unpack does the reverse of pack : it takes a stringand expands it out into a list of values.
untie(VARIABLE)\nBreaks the binding between a variable and a package.
unshift(ARRAY,LIST)\nDoes the opposite of a shift .
use(Module VERSION LIST)\nImports some semantics into the current package from the named module,generally by aliasing certain subroutine or variable names into yourpackage.
utime(LIST)\nChanges the access and modification times on each file of a list offiles.
values(HASH)\nReturns a list consisting of all the values of the named hash.
vec(EXPR,OFFSET,BITS)\nTreats the string in EXPR as a bit vector made up of elements ofwidth BITS, and returns the value of the element specified by OFFSETas an unsigned integer.
wait()\nBehaves like the wait(2) system call on your system: it waits for a childprocess to terminate and returns the pid of the deceased process, or -1 if there are no child processes.
waitpid(PID,FLAGS)\nWaits for a particular child process to terminate and returns the pid ofthe deceased process, or -1 if there is no such child process.
wantarray()\nReturns true if the context of the currently executing subroutine islooking for a list value.
warn(LIST)\nProduces a message on STDERR just like die , but doesn't exit or throwan exception.
write(FILEHANDLE)\nWrites a formatted record (possibly multi-line) to the specified FILEHANDLE,using the format associated with that file.
y(///)\nThe transliteration operator.

