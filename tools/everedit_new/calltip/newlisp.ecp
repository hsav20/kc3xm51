(! str-shell-command [int-flags])
($ int-idx)
(+ int-1 [int-2 ... ])
(- int-1 [int-2 ... ])
(* int-1 [int-2 ... ])
(/ int-1 [int-2 ... ])
(% int-1 [int-2 ... ])
(++ place [num ... ])
(-- place [num ... ])
(< exp-1 [exp-2 ... ])
(> exp-1 [exp-2 ... ])
(= exp-1 [exp-2 ... ])
(<= exp-1 [exp-2 ... ])
(>= exp-1 [exp-2 ... ])
(!= exp-1 [exp-2 ... ])
(<< int-1 int-2 [int-3 ... ])
(>> int-1 int-2 [int-3 ... ])
(<< int-1)
(>> int-1)
(& int-1 int-2 [int-3 ... ])
(| int-1 int-2 [int-3 ... ])
(^ int-1 int-2 [int-3 ... ])
(~ int)
(: sym-function list-object [ ... ])
(abort int-pid)
(abort)
(abs num)
(acos num-radians)
(acosh num-radians)
(add num-1 [num-2 ... ])
(address int)
(address float)
(address str)
(amb exp-1 [exp-2 ... ])
(and exp-1 [exp-2 ... ])
(append list-1 [list-2 ... ])
(append array-1 [array-2 ... ])
(append str-1 [str-2 ... ])
(append-file str-filename str-buffer)
(apply func list [int-reduce])
(args)
(args int-idx-1 [int-idx-2 ... ])
(array int-n1 [int-n2 ... ] [list-init])
(array-list array)
(array? exp)
(asin num-radians)
(asinh num-radians)
(assoc exp-key list-alist)
(assoc list-exp-key list-alist)
(atan num-radians)
(atan2 num-Y-radians num-X-radians)
(atanh num-radians)
(atom? exp)
(base64-dec str)
(base64-enc str [bool-flag])
(bayes-query list-L context-D [bool-chain [bool-probs]])
(bayes-train list-M1 [list-M2 ... ] sym-context-D)
(begin body)
(beta cum-a num-b)
(betai num-x num-a num-b)
(bigint number)
(bigint string)
(bigint? number)
(bind list-variable-associations [bool-eval])
(binomial int-n int-k float-p)
(bits int [bool])
(callback int-index sym-function)
(callback sym-function str-return-type [str_param_type ...])
(callback sym-function)
(case exp-switch (exp-1 body-1) [(exp-2 body-2) ... ])
(catch exp)
(catch exp symbol)
(ceil number)
(change-dir str-path)
(char str [int-index [true]])
(char int)
(chop str [int-chars])
(chop list [int-elements])
(clean exp-predicate list)
(close int-file)
(command-event sym-event-handler | func-event-handler)
(cond (exp-condition-1 body-1) [(exp-condition-2 body-2) ... ])
(cons exp-1 exp-2)
(constant sym-1 exp-1 [sym-2 exp-2] ...)
(context [sym-context])
(context sym-context str | sym [exp-value])
(context? exp)
(context? exp str-sym)
(copy exp)
(copy-file str-from-name str-to-name)
(corr list-vector-X list-vector-Y)
(cos num-radians)
(cosh num-radians)
(count list-1 list-2)
(cpymem int-from-address int-to-address int-bytes)
(crc32 str-data)
(crit-chi2 num-probability int-df)
(crit-f num-probability int-df1 int-df2)
(crit-t num-probability int-df)
(crit-z num-probability)
(current-line)
(curry func exp)
(date)
(date int-secs [int-offset])
(date int-secs int-offset str-format)
(date-list int-seconds [int-index])
(date-parse str-date str-format)
(date-value int-year int-month int-day [int-hour int-min int-sec])
(date-value)
(debug func)
(dec place [num])
(def-new sym-source [sym-target])
(default context)
(define (sym-name [sym-param-1 ... ]) [body-1 ... ])
(define (sym-name [(sym-param-1 exp-default) ... ]) [body-1 ... ])
(define sym-name exp)
(define-macro (sym-name [sym-param-1 ... ]) body)
(define-macro (sym-name [(sym-param-1 exp-default) ... ]) body)
(delete symbol [bool])
(delete sym-context [bool])
(delete-file str-file-name)
(delete-file str-url)
(destroy int-pid)
(destroy int-pid int-signal)
(det matrix [float-pivot])
(device [int-handle])
(difference list-A list-B)
(difference list-A list-B bool)
(directory [str-path])
(directory str-path str-pattern [int-regex-option])
(directory? str-path)
(div num-1 num-2 [num-3 ... ])
(div num-1)
(do-until exp-condition [body])
(do-while exp-condition body)
(doargs (sym [exp-break]) body)
(dolist (sym list [exp-break]) body)
(dostring (sym string [exp-break]) body)
(dotimes (sym-var int-count [exp-break]) body)
(dotree (sym sym-context [bool]) body)
(dump [exp])
(dup exp int-n [bool])
(dup exp)
(empty? exp)
(empty? str)
(encrypt str-source str-pad)
(ends-with str-data str-key [num-option])
(ends-with list exp)
(env)
(env var-str)
(env var-str value-str)
(erf num)
(error-event sym-event-handler | func-event-handler)
(eval exp)
(eval-string str-source [sym-context [exp-error [int-offset]]])
(even? int-number)
(exec str-process)
(exec str-process [str-stdin])
(exists func-condition list)
(exit [int])
(exp num)
(expand exp sym-1 [sym-2 ... ])
(expand exp list-assoc [bool])
(expand exp)
(expand list list-assoc [bool])
(expand list)
(explode str [int-chunk [bool]])
(explode list [int-chunk [bool]])
(extend list-1 [list-2 ... ])
(extend string-1 [string-2 ... ])
(factor int)
(fft list-num)
(file-info str-name [int-index [bool-flag]])
(file? str-path-name [bool])
(filter exp-predicate exp-list)
(find exp-key list [func-compare | int-regex-option])
(find str-key str-data [int-regex-option [int-offset]])
(find-all str-regex-pattern str-text [exp [int-regex-option]])
(find-all list-match-pattern list [exp])
(find-all exp-key list [exp [func-compare]])
(first list)
(first array)
(first str)
(flat list [int-level])
(float exp [exp-default])
(float? exp)
(floor number)
(flt number)
(fn (list-parameters) exp-body)
(for (sym num-from num-to [num-step [exp-break]]) body)
(for-all func-condition list)
(fork exp)
(format str-format exp-data-1 [exp-data-2 ... ])
(format str-format list-data)
(fv num-rate num-nper num-pmt num-pv [int-type])
(gammai num-a num-b)
(gammaln num-x)
(gcd int-1 [int-2 ... ])
(get-char int-address)
(get-float int-address)
(get-int int-address)
(get-long int-address)
(get-string int-address)
(get-url str-url [str-option] [int-timeout [str-header]])
(global sym-1 [sym-2 ... ])
(global? sym)
(if exp-condition exp-1 [exp-2])
(if exp-cond-1 exp-1 exp-cond-2 exp-2 [ ... ])
(ifft list-num)
(import str-lib-name str-function-name ["cdecl"])
(import str-lib-name str-function-name str-return-type [str-param-type . . .])
(import str-lib-name)
(inc place [num])
(index exp-predicate exp-list)
(inf? float)
(int exp [exp-default [int-base]])
(integer? exp)
(intersect list-A list-B)
(intersect list-A list-B bool)
(invert matrix [float-pivot])
(irr list-amounts [list-times [num-guess]])
(json-error)
(json-parse str-json-data)
(join list-of-strings [str-joint [bool-trail-joint]])
(kmeans-query list-data matrix-centroids)
(kmeans-query list-data matrix-data)
(kmeans-train matrix-data int-k context [matrix-centroids])
(lambda? exp)
(last list)
(last array)
(last str)
(last-error)
(last-error int-error)
(legal? str)
(length exp)
(let ((sym1 [exp-init1]) [(sym2 [exp-init2]) ... ]) body)
(let (sym1 exp-init1 [sym2 exp-init2 ... ]) body)
(letex ((sym1 [exp-init1]) [(sym2 [exp-init2]) ... ]) body)
(letex (sym1 exp-init1 [sym2 exp-init2 ... ]) body)
(letn ((sym1 [exp-init1]) [(sym2 [exp-init2]) ... ]) body)
(letn (sym1 exp-init1 [sym2 exp-init2 ... ]) body)
(list exp-1 [exp-2 ... ])
(list? exp)
(load str-file-name-1 [str-file-name-2 ... ] [sym-context])
(local (sym-1 [sym-2 ... ]) body)
(log num)
(log num num-base)
(lookup exp-key list-assoc [int-index [exp-default]])
(lower-case str)
(macro? exp)
(main-args)
(main-args int-index)
(make-dir str-dir-name [int-mode])
(map exp-functor list-args-1 [list-args-2 ... ])
(mat + | - | * | / matrix-A matrix-B)
(mat + | - | * | / matrix-A number)
(match list-pattern list-match [bool])
(max num-1 [num-2 ... ])
(member exp list)
(member str-key str [num-option])
(min num-1 [num-2 ... ])
(mod num-1 num-2 [num-3 ... ])
(mod num-1)
(mul num-1 num-2 [num-3 ... ])
(multiply matrix-A matrix-B)
(NaN? float)
(net-accept int-socket)
(net-close int-socket [true])
(net-connect str-remote-host int-port [int-timeout-ms])
(net-connect str-remote-host int-port [str-mode [int-ttl]])
(net-connect str-file-path)
(net-error)
(net-error int-error)
(net-eval str-host int-port exp [int-timeout [func-handler]])
(net-eval '((str-host int-port exp) ... ) [int-timeout [func-handler]])
(net-interface str-ip-addr)
(net-interface)
(net-ipv int-version)
(net-ipv)
(net-listen int-port [str-ip-addr [str-mode]])
(net-listen str-file-path)
(net-local int-socket)
(net-lookup str-ip-number)
(net-lookup str-hostname [bool])
(net-packet str-packet)
(net-peek int-socket)
(net-peer int-socket)
(net-ping str-address [int-timeout [int-count bool]]])
(net-ping list-addresses [int-timeout [int-count bool]]])
(net-receive int-socket sym-buffer int-max-bytes [wait-string])
(net-receive-from int-socket int-max-size)
(net-receive-udp int-port int-maxsize [int-microsec [str-addr-if]])
(net-select int-socket str-mode int-micro-seconds)
(net-select list-sockets str-mode int-micro-seconds)
(net-send int-socket str-buffer [int-num-bytes])
(net-send-to str-remotehost int-remoteport str-buffer int-socket)
(net-send-udp str-remotehost int-remoteport str-buffer [bool])
(net-service str-service str-protocol)
(net-service int-port str-protocol)
(net-sessions)
(new context-source sym-context-target [bool])
(new context-source)
(nil? exp)
(normal float-mean float-stdev int-n)
(normal float-mean float-stdev)
(not exp)
(now [int-minutes-offset [int-index]])
(nper num-interest num-pmt num-pv [num-fv [int-type]])
(npv num-interest list-values)
(nth int-index list)
(nth int-index array)
(nth int-index str)
(nth list-indices list)
(nth list-indices array)
(null? exp)
(number? exp)
(odd? int-number)
(open str-path-file str-access-mode [str-option])
(or exp-1 [exp-2 ... ])
(pack str-format exp-1 [exp-2 ... ])
(pack str-format list)
(pack struct exp-1 [exp-2 ... ])
(pack struct list)
(parse str-data [str-break [int-option]])
(peek int-handle)
(pipe)
(pmt num-interest num-periods num-principal [num-future-value [int-type]])
(pop list [int-index-1 [int-index-2 ... ]])
(pop list [list-indexes])
(pop str [int-index [int-length]])
(pop-assoc exp-key list-assoc)
(pop-assoc list-keys list-assoc)
(post-url str-url str-content [str-content-type [str-option] [int-timeout [ str-header]]])
(pow num-1 num-2 [num-3 ... ])
(pow num-1)
(prefix sym)
(pretty-print [int-length [str-tab [str-fp-format]])
(primitive? exp)
(print exp-1 [exp-2 ... ])
(println exp-1 [exp-2 ... ])
(prob-chi2 num-chi2 int-df)
(prob-f num-f int-df1 int-df2)
(prob-t num-t int-df1)
(prob-z num-z)
(process str-command)
(process str-command int-pipe-in int-pipe-out [int-win32-option])
(process str-command int-pipe-in int-pipe-out [int-unix-pipe-error])
(prompt-event sym-event-handler | func-event-handler)
(protected? sym)
(push exp list [int-index-1 [int-index-2 ... ]])
(push exp list [list-indexes])
(push str-1 str-2 [int-index])
(put-url str-url str-content [str-option] [int-timeout [str-header]])
(pv num-int num-nper num-pmt [num-fv [int-type]])
(quote exp)
(quote? exp)
(rand int-range [int-N])
(random float-offset float-scale int-n)
(random float-offset float-scale)
(randomize list [bool])
(read int-file sym-buffer int-size [str-wait])
(read-char [int-file])
(read-expr str-source [sym-context [exp-error [int-offset]]])
(read-file str-file-name)
(read-key)
(read-line [int-file])
(read-utf8 int-file)
(reader-event [sym-event-handler | func-event-handler])
(reader-event 'nil)
(real-path [str-path])
(real-path str-exec-name true)
(receive int-pid sym-message)
(receive)
(ref exp-key list [func-compare [true]])
(ref-all exp-key list [func-compare [true]])
(regex str-pattern str-text [int-option [int-offset]])
(regex-comp str-pattern [int-option])
(remove-dir str-path)
(rename-file str-path-old str-path-new)
(replace exp-key list exp-replacement [func-compare])
(replace exp-key list)
(replace str-key str-data exp-replacement)
(replace str-pattern str-data exp-replacement int-regex-option)
(reset)
(reset true)
(rest list)
(rest array)
(rest str)
(reverse list)
(reverse string)
(rotate list [int-count])
(rotate str [int-count])
(round number [int-digits])
(save str-file)
(save str-file sym-1 [sym-2 ... ])
(search int-file str-search [bool-flag [int-options]])
(seed int-seed)
(self [int-index ... ])
(seek int-file [int-position])
(select list list-selection)
(select list [int-index_i ... ])
(select string list-selection)
(select string [int-index_i ... ])
(semaphore)
(semaphore int-id)
(semaphore int-id int-wait)
(semaphore int-id int-signal)
(semaphore int-id 0)
(send int-pid exp)
(send)
(sequence num-start num-end [num-step])
(series num-start num-factor num-count)
(series exp-start func num-count)
(set sym-1 exp-1 [sym-2 exp-2 ... ])
(set-locale [str-locale [int-category]])
(set-ref exp-key list exp-replacement [func-compare])
(set-ref-all exp-key list exp-replacement [func-compare])
(setq place-1 exp-1 [place-2 exp-2 ... ])
(sgn num)
(sgn num exp-1 [exp-2 [exp-3]])
(share)
(share int-address-or-handle)
(share int-address-or-handle exp-value)
(share nil int-address)
(signal int-signal sym-event-handler | func-event-handler)
(signal int-signal "ignore" | "default" | "reset")
(signal int-signal)
(silent [exp-1 [exp-2 ... ]])
(sin num-radians)
(sinh num-radians)
(sleep num-milliseconds)
(slice list int-index [int-length])
(slice array int-index [int-length])
(slice str int-index [int-length])
(sort list [func-compare])
(source)
(source sym-1 [sym-2 ... ])
(spawn sym exp [true])
(sqrt num)
(starts-with str str-key [num-option])
(starts-with list [exp])
(stats list-vector)
(string exp-1 [exp-2 ... ])
(string? exp)
(struct symbol [str-data-type ... ])
(sub num-1 [num-2 ... ])
(swap place-1 place-2)
(sym string [sym-context [nil-flag]])
(sym number [sym-context [nil-flag]])
(sym symbol [sym-context [nil-flag]])
(symbol? exp)
(symbols [context])
(sync int-timeout [func-inlet])
(sync)
(sys-error)
(sys-error int-error)
(sys-error 0)
(sys-info [int-idx])
(t-test list-vector number-value)
(t-test list-vector-A list-vector-B [true])
(t-test list-vector-A list-vector-B float-probability)
(tan num-radians)
(tanh num-radians)
(term symbol)
(throw exp)
(throw-error exp)
(time exp [int-count)
(time-of-day)
(timer sym-event-handler | func-event-handler num-seconds [int-option])
(timer sym-event-handler | func-event-handler)
(timer)
(title-case str [bool])
(trace [bool])
(trace-highlight str-pre str-post [str-header str-footer])
(transpose matrix)
(trim str [str-char])
(trim str str-left-char str-right-char)
(true? exp)
(unicode str-utf8)
(unify exp-1 exp-2 [list-env])
(union list-1 list-2 [list-3 ... ])
(unique list)
(unless exp-condition body)
(unpack str-format str-addr-packed)
(unpack str-format num-addr-packed)
(unpack struct num-addr-packed)
(unpack struct str-addr-packed)
(until exp-condition [body])
(upper-case str)
(utf8 str-unicode)
(utf8len str)
(uuid [str-node])
(wait-pid int-pid [int-options | nil])
(when exp-condition body)
(while exp-condition body)
(write int-file str-buffer [int-size])
(write str str-buffer [int-size])
(write-char int-file int-byte1 [int-byte2 ... ])
(write-file str-file-name str-buffer)
(write-line [int-file [str]])
(write-line str-out [str]])
(xfer-event sym-event-handler | func-event-handler)
(xml-error)
(xml-parse string-xml [int-options [sym-context [func-callback]]])
(xml-type-tags [exp-text-tag exp-cdata-tag exp-comment-tag exp-element-tags])
(zero? exp)
